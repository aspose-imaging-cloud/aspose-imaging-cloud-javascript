/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AsposeimagingCloudApiReference);
  }
}(this, function(expect, AsposeimagingCloudApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AsposeimagingCloudApiReference.ImagingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ImagingApi', function() {
    describe('addSearchImage', function() {
      it('should call addSearchImage successfully', function(done) {
        //uncomment below and update the code to test addSearchImage
        //instance.addSearchImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('appendTiff', function() {
      it('should call appendTiff successfully', function(done) {
        //uncomment below and update the code to test appendTiff
        //instance.appendTiff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('compareImages', function() {
      it('should call compareImages successfully', function(done) {
        //uncomment below and update the code to test compareImages
        //instance.compareImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertImage', function() {
      it('should call convertImage successfully', function(done) {
        //uncomment below and update the code to test convertImage
        //instance.convertImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('convertTiffToFax', function() {
      it('should call convertTiffToFax successfully', function(done) {
        //uncomment below and update the code to test convertTiffToFax
        //instance.convertTiffToFax(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyFile', function() {
      it('should call copyFile successfully', function(done) {
        //uncomment below and update the code to test copyFile
        //instance.copyFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyFolder', function() {
      it('should call copyFolder successfully', function(done) {
        //uncomment below and update the code to test copyFolder
        //instance.copyFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConvertedImage', function() {
      it('should call createConvertedImage successfully', function(done) {
        //uncomment below and update the code to test createConvertedImage
        //instance.createConvertedImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCroppedImage', function() {
      it('should call createCroppedImage successfully', function(done) {
        //uncomment below and update the code to test createCroppedImage
        //instance.createCroppedImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeskewedImage', function() {
      it('should call createDeskewedImage successfully', function(done) {
        //uncomment below and update the code to test createDeskewedImage
        //instance.createDeskewedImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFaxTiff', function() {
      it('should call createFaxTiff successfully', function(done) {
        //uncomment below and update the code to test createFaxTiff
        //instance.createFaxTiff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFolder', function() {
      it('should call createFolder successfully', function(done) {
        //uncomment below and update the code to test createFolder
        //instance.createFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createGrayscaledImage', function() {
      it('should call createGrayscaledImage successfully', function(done) {
        //uncomment below and update the code to test createGrayscaledImage
        //instance.createGrayscaledImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageFeatures', function() {
      it('should call createImageFeatures successfully', function(done) {
        //uncomment below and update the code to test createImageFeatures
        //instance.createImageFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageFrame', function() {
      it('should call createImageFrame successfully', function(done) {
        //uncomment below and update the code to test createImageFrame
        //instance.createImageFrame(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageFrameRange', function() {
      it('should call createImageFrameRange successfully', function(done) {
        //uncomment below and update the code to test createImageFrameRange
        //instance.createImageFrameRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageSearch', function() {
      it('should call createImageSearch successfully', function(done) {
        //uncomment below and update the code to test createImageSearch
        //instance.createImageSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createImageTag', function() {
      it('should call createImageTag successfully', function(done) {
        //uncomment below and update the code to test createImageTag
        //instance.createImageTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedBmp', function() {
      it('should call createModifiedBmp successfully', function(done) {
        //uncomment below and update the code to test createModifiedBmp
        //instance.createModifiedBmp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedEmf', function() {
      it('should call createModifiedEmf successfully', function(done) {
        //uncomment below and update the code to test createModifiedEmf
        //instance.createModifiedEmf(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedGif', function() {
      it('should call createModifiedGif successfully', function(done) {
        //uncomment below and update the code to test createModifiedGif
        //instance.createModifiedGif(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedJpeg', function() {
      it('should call createModifiedJpeg successfully', function(done) {
        //uncomment below and update the code to test createModifiedJpeg
        //instance.createModifiedJpeg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedJpeg2000', function() {
      it('should call createModifiedJpeg2000 successfully', function(done) {
        //uncomment below and update the code to test createModifiedJpeg2000
        //instance.createModifiedJpeg2000(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedPsd', function() {
      it('should call createModifiedPsd successfully', function(done) {
        //uncomment below and update the code to test createModifiedPsd
        //instance.createModifiedPsd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedSvg', function() {
      it('should call createModifiedSvg successfully', function(done) {
        //uncomment below and update the code to test createModifiedSvg
        //instance.createModifiedSvg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedTiff', function() {
      it('should call createModifiedTiff successfully', function(done) {
        //uncomment below and update the code to test createModifiedTiff
        //instance.createModifiedTiff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedWebP', function() {
      it('should call createModifiedWebP successfully', function(done) {
        //uncomment below and update the code to test createModifiedWebP
        //instance.createModifiedWebP(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModifiedWmf', function() {
      it('should call createModifiedWmf successfully', function(done) {
        //uncomment below and update the code to test createModifiedWmf
        //instance.createModifiedWmf(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createObjectBounds', function() {
      it('should call createObjectBounds successfully', function(done) {
        //uncomment below and update the code to test createObjectBounds
        //instance.createObjectBounds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createResizedImage', function() {
      it('should call createResizedImage successfully', function(done) {
        //uncomment below and update the code to test createResizedImage
        //instance.createResizedImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRotateFlippedImage', function() {
      it('should call createRotateFlippedImage successfully', function(done) {
        //uncomment below and update the code to test createRotateFlippedImage
        //instance.createRotateFlippedImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUpdatedImage', function() {
      it('should call createUpdatedImage successfully', function(done) {
        //uncomment below and update the code to test createUpdatedImage
        //instance.createUpdatedImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVisualObjectBounds', function() {
      it('should call createVisualObjectBounds successfully', function(done) {
        //uncomment below and update the code to test createVisualObjectBounds
        //instance.createVisualObjectBounds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWebSiteImageFeatures', function() {
      it('should call createWebSiteImageFeatures successfully', function(done) {
        //uncomment below and update the code to test createWebSiteImageFeatures
        //instance.createWebSiteImageFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cropImage', function() {
      it('should call cropImage successfully', function(done) {
        //uncomment below and update the code to test cropImage
        //instance.cropImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFile', function() {
      it('should call deleteFile successfully', function(done) {
        //uncomment below and update the code to test deleteFile
        //instance.deleteFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFolder', function() {
      it('should call deleteFolder successfully', function(done) {
        //uncomment below and update the code to test deleteFolder
        //instance.deleteFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImageFeatures', function() {
      it('should call deleteImageFeatures successfully', function(done) {
        //uncomment below and update the code to test deleteImageFeatures
        //instance.deleteImageFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImageSearch', function() {
      it('should call deleteImageSearch successfully', function(done) {
        //uncomment below and update the code to test deleteImageSearch
        //instance.deleteImageSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSearchImage', function() {
      it('should call deleteSearchImage successfully', function(done) {
        //uncomment below and update the code to test deleteSearchImage
        //instance.deleteSearchImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deskewImage', function() {
      it('should call deskewImage successfully', function(done) {
        //uncomment below and update the code to test deskewImage
        //instance.deskewImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadFile', function() {
      it('should call downloadFile successfully', function(done) {
        //uncomment below and update the code to test downloadFile
        //instance.downloadFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extractImageFeatures', function() {
      it('should call extractImageFeatures successfully', function(done) {
        //uncomment below and update the code to test extractImageFeatures
        //instance.extractImageFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extractImageFrameProperties', function() {
      it('should call extractImageFrameProperties successfully', function(done) {
        //uncomment below and update the code to test extractImageFrameProperties
        //instance.extractImageFrameProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extractImageProperties', function() {
      it('should call extractImageProperties successfully', function(done) {
        //uncomment below and update the code to test extractImageProperties
        //instance.extractImageProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterEffectImage', function() {
      it('should call filterEffectImage successfully', function(done) {
        //uncomment below and update the code to test filterEffectImage
        //instance.filterEffectImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findImageDuplicates', function() {
      it('should call findImageDuplicates successfully', function(done) {
        //uncomment below and update the code to test findImageDuplicates
        //instance.findImageDuplicates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findImagesByTags', function() {
      it('should call findImagesByTags successfully', function(done) {
        //uncomment below and update the code to test findImagesByTags
        //instance.findImagesByTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('findSimilarImages', function() {
      it('should call findSimilarImages successfully', function(done) {
        //uncomment below and update the code to test findSimilarImages
        //instance.findSimilarImages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAvailableLabels', function() {
      it('should call getAvailableLabels successfully', function(done) {
        //uncomment below and update the code to test getAvailableLabels
        //instance.getAvailableLabels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDiscUsage', function() {
      it('should call getDiscUsage successfully', function(done) {
        //uncomment below and update the code to test getDiscUsage
        //instance.getDiscUsage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFileVersions', function() {
      it('should call getFileVersions successfully', function(done) {
        //uncomment below and update the code to test getFileVersions
        //instance.getFileVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFilesList', function() {
      it('should call getFilesList successfully', function(done) {
        this.timeout(0);
// Configure OAuth2 access token for authorization: JWT
        var JWT = AsposeimagingCloudApiReference.ApiClient.instance.authentications['JWT'];
        JWT.accessToken = '';

        var path = ""; // String | Folder path e.g. '/folder'

        var opts = {
          'storageName': "Imaging-CI" // String | Storage name
        };

        var callback = function(error, data, response) {
          if (error) {
            console.error(error);
            done();
          } else {
            console.log('API called successfully. Returned data: ' + data);
            done();
          }
        };
        instance.getFilesList(path, opts, callback);
      });
    });
    describe('getImageFeatures', function() {
      it('should call getImageFeatures successfully', function(done) {
        //uncomment below and update the code to test getImageFeatures
        //instance.getImageFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageFrame', function() {
      it('should call getImageFrame successfully', function(done) {
        //uncomment below and update the code to test getImageFrame
        //instance.getImageFrame(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageFrameProperties', function() {
      it('should call getImageFrameProperties successfully', function(done) {
        //uncomment below and update the code to test getImageFrameProperties
        //instance.getImageFrameProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageFrameRange', function() {
      it('should call getImageFrameRange successfully', function(done) {
        //uncomment below and update the code to test getImageFrameRange
        //instance.getImageFrameRange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageProperties', function() {
      it('should call getImageProperties successfully', function(done) {
        //uncomment below and update the code to test getImageProperties
        //instance.getImageProperties(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getImageSearchStatus', function() {
      it('should call getImageSearchStatus successfully', function(done) {
        //uncomment below and update the code to test getImageSearchStatus
        //instance.getImageSearchStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectBounds', function() {
      it('should call getObjectBounds successfully', function(done) {
        //uncomment below and update the code to test getObjectBounds
        //instance.getObjectBounds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSearchImage', function() {
      it('should call getSearchImage successfully', function(done) {
        //uncomment below and update the code to test getSearchImage
        //instance.getSearchImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVisualObjectBounds', function() {
      it('should call getVisualObjectBounds successfully', function(done) {
        //uncomment below and update the code to test getVisualObjectBounds
        //instance.getVisualObjectBounds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('grayscaleImage', function() {
      it('should call grayscaleImage successfully', function(done) {
        //uncomment below and update the code to test grayscaleImage
        //instance.grayscaleImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyBmp', function() {
      it('should call modifyBmp successfully', function(done) {
        //uncomment below and update the code to test modifyBmp
        //instance.modifyBmp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyEmf', function() {
      it('should call modifyEmf successfully', function(done) {
        //uncomment below and update the code to test modifyEmf
        //instance.modifyEmf(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyGif', function() {
      it('should call modifyGif successfully', function(done) {
        //uncomment below and update the code to test modifyGif
        //instance.modifyGif(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyJpeg', function() {
      it('should call modifyJpeg successfully', function(done) {
        //uncomment below and update the code to test modifyJpeg
        //instance.modifyJpeg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyJpeg2000', function() {
      it('should call modifyJpeg2000 successfully', function(done) {
        //uncomment below and update the code to test modifyJpeg2000
        //instance.modifyJpeg2000(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyPsd', function() {
      it('should call modifyPsd successfully', function(done) {
        //uncomment below and update the code to test modifyPsd
        //instance.modifyPsd(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifySvg', function() {
      it('should call modifySvg successfully', function(done) {
        //uncomment below and update the code to test modifySvg
        //instance.modifySvg(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyTiff', function() {
      it('should call modifyTiff successfully', function(done) {
        //uncomment below and update the code to test modifyTiff
        //instance.modifyTiff(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyWebP', function() {
      it('should call modifyWebP successfully', function(done) {
        //uncomment below and update the code to test modifyWebP
        //instance.modifyWebP(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('modifyWmf', function() {
      it('should call modifyWmf successfully', function(done) {
        //uncomment below and update the code to test modifyWmf
        //instance.modifyWmf(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveFile', function() {
      it('should call moveFile successfully', function(done) {
        //uncomment below and update the code to test moveFile
        //instance.moveFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveFolder', function() {
      it('should call moveFolder successfully', function(done) {
        //uncomment below and update the code to test moveFolder
        //instance.moveFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('objectExists', function() {
      it('should call objectExists successfully', function(done) {
        //uncomment below and update the code to test objectExists
        //instance.objectExists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resizeImage', function() {
      it('should call resizeImage successfully', function(done) {
        //uncomment below and update the code to test resizeImage
        //instance.resizeImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rotateFlipImage', function() {
      it('should call rotateFlipImage successfully', function(done) {
        //uncomment below and update the code to test rotateFlipImage
        //instance.rotateFlipImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('storageExists', function() {
      it('should call storageExists successfully', function(done) {
        //uncomment below and update the code to test storageExists
        //instance.storageExists(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateImage', function() {
      it('should call updateImage successfully', function(done) {
        //uncomment below and update the code to test updateImage
        //instance.updateImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateImageFeatures', function() {
      it('should call updateImageFeatures successfully', function(done) {
        //uncomment below and update the code to test updateImageFeatures
        //instance.updateImageFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSearchImage', function() {
      it('should call updateSearchImage successfully', function(done) {
        //uncomment below and update the code to test updateSearchImage
        //instance.updateSearchImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFile', function() {
      it('should call uploadFile successfully', function(done) {
        //uncomment below and update the code to test uploadFile
        //instance.uploadFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
