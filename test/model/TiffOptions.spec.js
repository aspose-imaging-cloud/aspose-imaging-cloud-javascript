/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AsposeimagingCloudApiReference);
  }
}(this, function(expect, AsposeimagingCloudApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AsposeimagingCloudApiReference.TiffOptions();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TiffOptions', function() {
    it('should create an instance of TiffOptions', function() {
      // uncomment below and update the code to test TiffOptions
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be.a(AsposeimagingCloudApiReference.TiffOptions);
    });

    it('should have the property isValid (base name: "IsValid")', function() {
      // uncomment below and update the code to test the property isValid
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property artist (base name: "Artist")', function() {
      // uncomment below and update the code to test the property artist
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property byteOrder (base name: "ByteOrder")', function() {
      // uncomment below and update the code to test the property byteOrder
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property bitsPerSample (base name: "BitsPerSample")', function() {
      // uncomment below and update the code to test the property bitsPerSample
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property compression (base name: "Compression")', function() {
      // uncomment below and update the code to test the property compression
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property copyright (base name: "Copyright")', function() {
      // uncomment below and update the code to test the property copyright
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property colorMap (base name: "ColorMap")', function() {
      // uncomment below and update the code to test the property colorMap
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property dateTime (base name: "DateTime")', function() {
      // uncomment below and update the code to test the property dateTime
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property documentName (base name: "DocumentName")', function() {
      // uncomment below and update the code to test the property documentName
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property alphaStorage (base name: "AlphaStorage")', function() {
      // uncomment below and update the code to test the property alphaStorage
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property fillOrder (base name: "FillOrder")', function() {
      // uncomment below and update the code to test the property fillOrder
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property halfToneHints (base name: "HalfToneHints")', function() {
      // uncomment below and update the code to test the property halfToneHints
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property imageDescription (base name: "ImageDescription")', function() {
      // uncomment below and update the code to test the property imageDescription
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property inkNames (base name: "InkNames")', function() {
      // uncomment below and update the code to test the property inkNames
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property scannerManufacturer (base name: "ScannerManufacturer")', function() {
      // uncomment below and update the code to test the property scannerManufacturer
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property maxSampleValue (base name: "MaxSampleValue")', function() {
      // uncomment below and update the code to test the property maxSampleValue
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property minSampleValue (base name: "MinSampleValue")', function() {
      // uncomment below and update the code to test the property minSampleValue
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property scannerModel (base name: "ScannerModel")', function() {
      // uncomment below and update the code to test the property scannerModel
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property pageName (base name: "PageName")', function() {
      // uncomment below and update the code to test the property pageName
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property orientation (base name: "Orientation")', function() {
      // uncomment below and update the code to test the property orientation
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property pageNumber (base name: "PageNumber")', function() {
      // uncomment below and update the code to test the property pageNumber
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property photometric (base name: "Photometric")', function() {
      // uncomment below and update the code to test the property photometric
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property planarConfiguration (base name: "PlanarConfiguration")', function() {
      // uncomment below and update the code to test the property planarConfiguration
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property resolutionUnit (base name: "ResolutionUnit")', function() {
      // uncomment below and update the code to test the property resolutionUnit
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property rowsPerStrip (base name: "RowsPerStrip")', function() {
      // uncomment below and update the code to test the property rowsPerStrip
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property sampleFormat (base name: "SampleFormat")', function() {
      // uncomment below and update the code to test the property sampleFormat
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property samplesPerPixel (base name: "SamplesPerPixel")', function() {
      // uncomment below and update the code to test the property samplesPerPixel
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property smaxSampleValue (base name: "SmaxSampleValue")', function() {
      // uncomment below and update the code to test the property smaxSampleValue
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property sminSampleValue (base name: "SminSampleValue")', function() {
      // uncomment below and update the code to test the property sminSampleValue
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property softwareType (base name: "SoftwareType")', function() {
      // uncomment below and update the code to test the property softwareType
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property stripByteCounts (base name: "StripByteCounts")', function() {
      // uncomment below and update the code to test the property stripByteCounts
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property stripOffsets (base name: "StripOffsets")', function() {
      // uncomment below and update the code to test the property stripOffsets
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property subFileType (base name: "SubFileType")', function() {
      // uncomment below and update the code to test the property subFileType
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property targetPrinter (base name: "TargetPrinter")', function() {
      // uncomment below and update the code to test the property targetPrinter
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property threshholding (base name: "Threshholding")', function() {
      // uncomment below and update the code to test the property threshholding
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property totalPages (base name: "TotalPages")', function() {
      // uncomment below and update the code to test the property totalPages
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property xposition (base name: "Xposition")', function() {
      // uncomment below and update the code to test the property xposition
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property xresolution (base name: "Xresolution")', function() {
      // uncomment below and update the code to test the property xresolution
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property yposition (base name: "Yposition")', function() {
      // uncomment below and update the code to test the property yposition
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property yresolution (base name: "Yresolution")', function() {
      // uncomment below and update the code to test the property yresolution
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property faxT4Options (base name: "FaxT4Options")', function() {
      // uncomment below and update the code to test the property faxT4Options
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property predictor (base name: "Predictor")', function() {
      // uncomment below and update the code to test the property predictor
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property imageLength (base name: "ImageLength")', function() {
      // uncomment below and update the code to test the property imageLength
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property imageWidth (base name: "ImageWidth")', function() {
      // uncomment below and update the code to test the property imageWidth
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property validTagCount (base name: "ValidTagCount")', function() {
      // uncomment below and update the code to test the property validTagCount
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

    it('should have the property bitsPerPixel (base name: "BitsPerPixel")', function() {
      // uncomment below and update the code to test the property bitsPerPixel
      //var instance = new AsposeimagingCloudApiReference.TiffOptions();
      //expect(instance).to.be();
    });

  });

}));
