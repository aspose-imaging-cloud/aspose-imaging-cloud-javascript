/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AsposeimagingCloudApiReference);
  }
}(this, function(expect, AsposeimagingCloudApiReference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AsposeimagingCloudApiReference.DicomProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DicomProperties', function() {
    it('should create an instance of DicomProperties', function() {
      // uncomment below and update the code to test DicomProperties
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be.a(AsposeimagingCloudApiReference.DicomProperties);
    });

    it('should have the property planarConfiguration (base name: "PlanarConfiguration")', function() {
      // uncomment below and update the code to test the property planarConfiguration
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property reds (base name: "Reds")', function() {
      // uncomment below and update the code to test the property reds
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property greens (base name: "Greens")', function() {
      // uncomment below and update the code to test the property greens
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property blues (base name: "Blues")', function() {
      // uncomment below and update the code to test the property blues
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property dicomHeaderInfoByBytes (base name: "DicomHeaderInfoByBytes")', function() {
      // uncomment below and update the code to test the property dicomHeaderInfoByBytes
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property signedImage (base name: "SignedImage")', function() {
      // uncomment below and update the code to test the property signedImage
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property dicomInfo (base name: "DicomInfo")', function() {
      // uncomment below and update the code to test the property dicomInfo
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property samplesPerPixel (base name: "SamplesPerPixel")', function() {
      // uncomment below and update the code to test the property samplesPerPixel
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property bitsAllocated (base name: "BitsAllocated")', function() {
      // uncomment below and update the code to test the property bitsAllocated
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property photoInterpretation (base name: "PhotoInterpretation")', function() {
      // uncomment below and update the code to test the property photoInterpretation
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "Width")', function() {
      // uncomment below and update the code to test the property width
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property height (base name: "Height")', function() {
      // uncomment below and update the code to test the property height
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property windowCentre (base name: "WindowCentre")', function() {
      // uncomment below and update the code to test the property windowCentre
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property windowWidth (base name: "WindowWidth")', function() {
      // uncomment below and update the code to test the property windowWidth
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property pixelRepresentation (base name: "PixelRepresentation")', function() {
      // uncomment below and update the code to test the property pixelRepresentation
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property rescaleIntercept (base name: "RescaleIntercept")', function() {
      // uncomment below and update the code to test the property rescaleIntercept
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property rescaleSlope (base name: "RescaleSlope")', function() {
      // uncomment below and update the code to test the property rescaleSlope
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property numberOfFrames (base name: "NumberOfFrames")', function() {
      // uncomment below and update the code to test the property numberOfFrames
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property isLittleEndian (base name: "IsLittleEndian")', function() {
      // uncomment below and update the code to test the property isLittleEndian
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "Offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new AsposeimagingCloudApiReference.DicomProperties();
      //expect(instance).to.be();
    });

  });

}));
