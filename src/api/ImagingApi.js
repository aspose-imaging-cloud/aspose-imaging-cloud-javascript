/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AvailableLabelsList', 'model/DetectedObjectList', 'model/DiscUsage', 'model/FileVersions', 'model/FilesList', 'model/FilesUploadResult', 'model/FilterPropertiesBase', 'model/ImageDuplicatesSet', 'model/ImageFeatures', 'model/ImagingResponse', 'model/ObjectExist', 'model/SearchContextStatus', 'model/SearchResultsSet', 'model/StorageExist'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AvailableLabelsList'), require('../model/DetectedObjectList'), require('../model/DiscUsage'), require('../model/FileVersions'), require('../model/FilesList'), require('../model/FilesUploadResult'), require('../model/FilterPropertiesBase'), require('../model/ImageDuplicatesSet'), require('../model/ImageFeatures'), require('../model/ImagingResponse'), require('../model/ObjectExist'), require('../model/SearchContextStatus'), require('../model/SearchResultsSet'), require('../model/StorageExist'));
  } else {
    // Browser globals (root is window)
    if (!root.AsposeimagingCloudApiReference) {
      root.AsposeimagingCloudApiReference = {};
    }
    root.AsposeimagingCloudApiReference.ImagingApi = factory(root.AsposeimagingCloudApiReference.ApiClient, root.AsposeimagingCloudApiReference.AvailableLabelsList, root.AsposeimagingCloudApiReference.DetectedObjectList, root.AsposeimagingCloudApiReference.DiscUsage, root.AsposeimagingCloudApiReference.FileVersions, root.AsposeimagingCloudApiReference.FilesList, root.AsposeimagingCloudApiReference.FilesUploadResult, root.AsposeimagingCloudApiReference.FilterPropertiesBase, root.AsposeimagingCloudApiReference.ImageDuplicatesSet, root.AsposeimagingCloudApiReference.ImageFeatures, root.AsposeimagingCloudApiReference.ImagingResponse, root.AsposeimagingCloudApiReference.ObjectExist, root.AsposeimagingCloudApiReference.SearchContextStatus, root.AsposeimagingCloudApiReference.SearchResultsSet, root.AsposeimagingCloudApiReference.StorageExist);
  }
}(this, function(ApiClient, AvailableLabelsList, DetectedObjectList, DiscUsage, FileVersions, FilesList, FilesUploadResult, FilterPropertiesBase, ImageDuplicatesSet, ImageFeatures, ImagingResponse, ObjectExist, SearchContextStatus, SearchResultsSet, StorageExist) {
  'use strict';

  /**
   * Imaging service.
   * @module api/ImagingApi
   * @version 3.0
   */

  /**
   * Constructs a new ImagingApi. 
   * @alias module:api/ImagingApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addSearchImage operation.
     * @callback module:api/ImagingApi~addSearchImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add image and images features to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId Search context identifier.
     * @param {String} imageId Image identifier.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.folder Folder.
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~addSearchImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.addSearchImage = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling addSearchImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling addSearchImage");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/image', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the appendTiff operation.
     * @callback module:api/ImagingApi~appendTiffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Appends existing TIFF image to another existing TIFF image (i.e. merges TIFF images).
     * @param {String} name Original image file name.
     * @param {String} appendFile Image file name to be appended to original one.
     * @param {Object} opts Optional parameters
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.folder Folder with images to process.
     * @param {module:api/ImagingApi~appendTiffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.appendTiff = function(name, appendFile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling appendTiff");
      }

      // verify the required parameter 'appendFile' is set
      if (appendFile === undefined || appendFile === null) {
        throw new Error("Missing the required parameter 'appendFile' when calling appendTiff");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'appendFile': appendFile,
        'storage': opts['storage'],
        'folder': opts['folder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/tiff/{name}/appendTiff', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the compareImages operation.
     * @callback module:api/ImagingApi~compareImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare two images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId The search context identifier.
     * @param {String} imageId1 The first image Id in storage.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.imageId2 The second image Id in storage or null (if image loading in request).
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~compareImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsSet}
     */
    this.compareImages = function(searchContextId, imageId1, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling compareImages");
      }

      // verify the required parameter 'imageId1' is set
      if (imageId1 === undefined || imageId1 === null) {
        throw new Error("Missing the required parameter 'imageId1' when calling compareImages");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId1': imageId1,
        'imageId2': opts['imageId2'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SearchResultsSet;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/compare', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertImage operation.
     * @callback module:api/ImagingApi~convertImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert existing image to another format.
     * @param {String} name Filename of image.
     * @param {String} format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~convertImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.convertImage = function(name, format, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling convertImage");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling convertImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'format': format,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/convert', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertTiffToFax operation.
     * @callback module:api/ImagingApi~convertTiffToFaxCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing TIFF image accordingly to fax parameters.
     * @param {String} name Filename of image.
     * @param {Object} opts Optional parameters
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.folder Folder with image to process.
     * @param {module:api/ImagingApi~convertTiffToFaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.convertTiffToFax = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling convertTiffToFax");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'storage': opts['storage'],
        'folder': opts['folder'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/tiff/{name}/toFax', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyFile operation.
     * @callback module:api/ImagingApi~copyFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy file
     * @param {String} srcPath Source file path e.g. &#39;/folder/file.ext&#39;
     * @param {String} destPath Destination file path
     * @param {Object} opts Optional parameters
     * @param {String} opts.srcStorageName Source storage name
     * @param {String} opts.destStorageName Destination storage name
     * @param {String} opts.versionId File version ID to copy
     * @param {module:api/ImagingApi~copyFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.copyFile = function(srcPath, destPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'srcPath' is set
      if (srcPath === undefined || srcPath === null) {
        throw new Error("Missing the required parameter 'srcPath' when calling copyFile");
      }

      // verify the required parameter 'destPath' is set
      if (destPath === undefined || destPath === null) {
        throw new Error("Missing the required parameter 'destPath' when calling copyFile");
      }


      var pathParams = {
        'srcPath': srcPath
      };
      var queryParams = {
        'destPath': destPath,
        'srcStorageName': opts['srcStorageName'],
        'destStorageName': opts['destStorageName'],
        'versionId': opts['versionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/file/copy/{srcPath}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyFolder operation.
     * @callback module:api/ImagingApi~copyFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy folder
     * @param {String} srcPath Source folder path e.g. &#39;/src&#39;
     * @param {String} destPath Destination folder path e.g. &#39;/dst&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.srcStorageName Source storage name
     * @param {String} opts.destStorageName Destination storage name
     * @param {module:api/ImagingApi~copyFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.copyFolder = function(srcPath, destPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'srcPath' is set
      if (srcPath === undefined || srcPath === null) {
        throw new Error("Missing the required parameter 'srcPath' when calling copyFolder");
      }

      // verify the required parameter 'destPath' is set
      if (destPath === undefined || destPath === null) {
        throw new Error("Missing the required parameter 'destPath' when calling copyFolder");
      }


      var pathParams = {
        'srcPath': srcPath
      };
      var queryParams = {
        'destPath': destPath,
        'srcStorageName': opts['srcStorageName'],
        'destStorageName': opts['destStorageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/folder/copy/{srcPath}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createConvertedImage operation.
     * @callback module:api/ImagingApi~createConvertedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert existing image to another format. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.             
     * @param {File} imageData Input image
     * @param {String} format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {Object} opts Optional parameters
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createConvertedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createConvertedImage = function(imageData, format, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createConvertedImage");
      }

      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling createConvertedImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'format': format,
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/convert', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCroppedImage operation.
     * @callback module:api/ImagingApi~createCroppedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crop an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} x X position of start point for cropping rectangle.
     * @param {Number} y Y position of start point for cropping rectangle.
     * @param {Number} width Width of cropping rectangle.
     * @param {Number} height Height of cropping rectangle.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createCroppedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createCroppedImage = function(imageData, x, y, width, height, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createCroppedImage");
      }

      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling createCroppedImage");
      }

      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling createCroppedImage");
      }

      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling createCroppedImage");
      }

      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling createCroppedImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'x': x,
        'y': y,
        'width': width,
        'height': height,
        'format': opts['format'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/crop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeskewedImage operation.
     * @callback module:api/ImagingApi~createDeskewedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deskew an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Boolean} resizeProportionally Resize proportionally
     * @param {Object} opts Optional parameters
     * @param {String} opts.bkColor Background color
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image)
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createDeskewedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createDeskewedImage = function(imageData, resizeProportionally, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createDeskewedImage");
      }

      // verify the required parameter 'resizeProportionally' is set
      if (resizeProportionally === undefined || resizeProportionally === null) {
        throw new Error("Missing the required parameter 'resizeProportionally' when calling createDeskewedImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'resizeProportionally': resizeProportionally,
        'bkColor': opts['bkColor'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/deskew', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFaxTiff operation.
     * @callback module:api/ImagingApi~createFaxTiffCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of TIFF image accordingly to fax parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createFaxTiffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createFaxTiff = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createFaxTiff");
      }


      var pathParams = {
      };
      var queryParams = {
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/tiff/toFax', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolder operation.
     * @callback module:api/ImagingApi~createFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create the folder
     * @param {String} path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {module:api/ImagingApi~createFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createFolder = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling createFolder");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/folder/{path}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createGrayscaledImage operation.
     * @callback module:api/ImagingApi~createGrayscaledImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grayscales an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image)
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createGrayscaledImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createGrayscaledImage = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createGrayscaledImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/grayscale', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageFeatures operation.
     * @callback module:api/ImagingApi~createImageFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract images features and add them to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId The search context identifier.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.imageId The image identifier.
     * @param {String} opts.imagesFolder Images source - a folder
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~createImageFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createImageFeatures = function(searchContextId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling createImageFeatures");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': opts['imageId'],
        'imagesFolder': opts['imagesFolder'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/features', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageFrame operation.
     * @callback module:api/ImagingApi~createImageFrameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get separate frame from existing image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} frameId Number of a frame.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.newWidth New width.
     * @param {Number} opts.newHeight New height.
     * @param {Number} opts.x X position of start point for cropping rectangle.
     * @param {Number} opts.y Y position of start point for cropping rectangle.
     * @param {Number} opts.rectWidth Width of cropping rectangle.
     * @param {Number} opts.rectHeight Height of cropping rectangle.
     * @param {String} opts.rotateFlipMethod RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
     * @param {Boolean} opts.saveOtherFrames If result will include all other frames or just a specified frame. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createImageFrameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createImageFrame = function(imageData, frameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createImageFrame");
      }

      // verify the required parameter 'frameId' is set
      if (frameId === undefined || frameId === null) {
        throw new Error("Missing the required parameter 'frameId' when calling createImageFrame");
      }


      var pathParams = {
        'frameId': frameId
      };
      var queryParams = {
        'newWidth': opts['newWidth'],
        'newHeight': opts['newHeight'],
        'x': opts['x'],
        'y': opts['y'],
        'rectWidth': opts['rectWidth'],
        'rectHeight': opts['rectHeight'],
        'rotateFlipMethod': opts['rotateFlipMethod'],
        'saveOtherFrames': opts['saveOtherFrames'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/frames/{frameId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageFrameRange operation.
     * @callback module:api/ImagingApi~createImageFrameRangeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get frames range from existing image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} startFrameId Index of the first frame in range.
     * @param {Number} endFrameId Index of the last frame in range.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.newWidth New width.
     * @param {Number} opts.newHeight New height.
     * @param {Number} opts.x X position of start point for cropping rectangle.
     * @param {Number} opts.y Y position of start point for cropping rectangle.
     * @param {Number} opts.rectWidth Width of cropping rectangle.
     * @param {Number} opts.rectHeight Height of cropping rectangle.
     * @param {String} opts.rotateFlipMethod RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
     * @param {Boolean} opts.saveOtherFrames If result will include all other frames or just a specified frame. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createImageFrameRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createImageFrameRange = function(imageData, startFrameId, endFrameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createImageFrameRange");
      }

      // verify the required parameter 'startFrameId' is set
      if (startFrameId === undefined || startFrameId === null) {
        throw new Error("Missing the required parameter 'startFrameId' when calling createImageFrameRange");
      }

      // verify the required parameter 'endFrameId' is set
      if (endFrameId === undefined || endFrameId === null) {
        throw new Error("Missing the required parameter 'endFrameId' when calling createImageFrameRange");
      }


      var pathParams = {
      };
      var queryParams = {
        'startFrameId': startFrameId,
        'endFrameId': endFrameId,
        'newWidth': opts['newWidth'],
        'newHeight': opts['newHeight'],
        'x': opts['x'],
        'y': opts['y'],
        'rectWidth': opts['rectWidth'],
        'rectHeight': opts['rectHeight'],
        'rotateFlipMethod': opts['rotateFlipMethod'],
        'saveOtherFrames': opts['saveOtherFrames'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/frames/range', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageSearch operation.
     * @callback module:api/ImagingApi~createImageSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchContextStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new search context.
     * @param {Object} opts Optional parameters
     * @param {String} opts.detector The image features detector. (default to akaze)
     * @param {String} opts.matchingAlgorithm The matching algorithm. (default to randomBinaryTree)
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~createImageSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchContextStatus}
     */
    this.createImageSearch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'detector': opts['detector'],
        'matchingAlgorithm': opts['matchingAlgorithm'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SearchContextStatus;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageTag operation.
     * @callback module:api/ImagingApi~createImageTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tag and reference image to search context. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {String} searchContextId The search context identifier.
     * @param {String} tagName The tag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~createImageTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createImageTag = function(imageData, searchContextId, tagName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createImageTag");
      }

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling createImageTag");
      }

      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling createImageTag");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'tagName': tagName,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/addTag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedBmp operation.
     * @callback module:api/ImagingApi~createModifiedBmpCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of BMP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} bitsPerPixel Color depth.
     * @param {Number} horizontalResolution New horizontal resolution.
     * @param {Number} verticalResolution New vertical resolution.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedBmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedBmp = function(imageData, bitsPerPixel, horizontalResolution, verticalResolution, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedBmp");
      }

      // verify the required parameter 'bitsPerPixel' is set
      if (bitsPerPixel === undefined || bitsPerPixel === null) {
        throw new Error("Missing the required parameter 'bitsPerPixel' when calling createModifiedBmp");
      }

      // verify the required parameter 'horizontalResolution' is set
      if (horizontalResolution === undefined || horizontalResolution === null) {
        throw new Error("Missing the required parameter 'horizontalResolution' when calling createModifiedBmp");
      }

      // verify the required parameter 'verticalResolution' is set
      if (verticalResolution === undefined || verticalResolution === null) {
        throw new Error("Missing the required parameter 'verticalResolution' when calling createModifiedBmp");
      }


      var pathParams = {
      };
      var queryParams = {
        'bitsPerPixel': bitsPerPixel,
        'horizontalResolution': horizontalResolution,
        'verticalResolution': verticalResolution,
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/bmp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedEmf operation.
     * @callback module:api/ImagingApi~createModifiedEmfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process existing EMF imaging using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {String} bkColor Color of the background.
     * @param {Number} pageWidth Width of the page.
     * @param {Number} pageHeight Height of the page.
     * @param {Number} borderX Border width.
     * @param {Number} borderY Border height.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
     * @param {module:api/ImagingApi~createModifiedEmfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedEmf = function(imageData, bkColor, pageWidth, pageHeight, borderX, borderY, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedEmf");
      }

      // verify the required parameter 'bkColor' is set
      if (bkColor === undefined || bkColor === null) {
        throw new Error("Missing the required parameter 'bkColor' when calling createModifiedEmf");
      }

      // verify the required parameter 'pageWidth' is set
      if (pageWidth === undefined || pageWidth === null) {
        throw new Error("Missing the required parameter 'pageWidth' when calling createModifiedEmf");
      }

      // verify the required parameter 'pageHeight' is set
      if (pageHeight === undefined || pageHeight === null) {
        throw new Error("Missing the required parameter 'pageHeight' when calling createModifiedEmf");
      }

      // verify the required parameter 'borderX' is set
      if (borderX === undefined || borderX === null) {
        throw new Error("Missing the required parameter 'borderX' when calling createModifiedEmf");
      }

      // verify the required parameter 'borderY' is set
      if (borderY === undefined || borderY === null) {
        throw new Error("Missing the required parameter 'borderY' when calling createModifiedEmf");
      }


      var pathParams = {
      };
      var queryParams = {
        'bkColor': bkColor,
        'pageWidth': pageWidth,
        'pageHeight': pageHeight,
        'borderX': borderX,
        'borderY': borderY,
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/emf', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedGif operation.
     * @callback module:api/ImagingApi~createModifiedGifCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of GIF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {Number} opts.backgroundColorIndex Index of the background color. (default to 32)
     * @param {Number} opts.colorResolution Color resolution. (default to 3)
     * @param {Boolean} opts.hasTrailer Specifies if image has trailer. (default to true)
     * @param {Boolean} opts.interlaced Specifies if image is interlaced. (default to true)
     * @param {Boolean} opts.isPaletteSorted Specifies if palette is sorted. (default to false)
     * @param {Number} opts.pixelAspectRatio Pixel aspect ratio. (default to 3)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to true)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedGifCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedGif = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedGif");
      }


      var pathParams = {
      };
      var queryParams = {
        'backgroundColorIndex': opts['backgroundColorIndex'],
        'colorResolution': opts['colorResolution'],
        'hasTrailer': opts['hasTrailer'],
        'interlaced': opts['interlaced'],
        'isPaletteSorted': opts['isPaletteSorted'],
        'pixelAspectRatio': opts['pixelAspectRatio'],
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/gif', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedJpeg operation.
     * @callback module:api/ImagingApi~createModifiedJpegCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of JPEG image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {Number} opts.quality Quality of an image from 0 to 100. Default is 75. (default to 75)
     * @param {String} opts.compressionType Compression type: baseline (default), progressive, lossless or jpegls. (default to baseline)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedJpegCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedJpeg = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedJpeg");
      }


      var pathParams = {
      };
      var queryParams = {
        'quality': opts['quality'],
        'compressionType': opts['compressionType'],
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/jpg', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedJpeg2000 operation.
     * @callback module:api/ImagingApi~createModifiedJpeg2000Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of JPEG2000 image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {String} comment The comment (can be either single or comma-separated).
     * @param {Object} opts Optional parameters
     * @param {String} opts.codec The codec (j2k or jp2). (default to j2k)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedJpeg2000Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedJpeg2000 = function(imageData, comment, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedJpeg2000");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling createModifiedJpeg2000");
      }


      var pathParams = {
      };
      var queryParams = {
        'comment': comment,
        'codec': opts['codec'],
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/jpg2000', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedPsd operation.
     * @callback module:api/ImagingApi~createModifiedPsdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of PSD image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {Number} opts.channelsCount Count of color channels. (default to 4)
     * @param {String} opts.compressionMethod Compression method (for now, raw and RLE are supported). (default to rle)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedPsdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedPsd = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedPsd");
      }


      var pathParams = {
      };
      var queryParams = {
        'channelsCount': opts['channelsCount'],
        'compressionMethod': opts['compressionMethod'],
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/psd', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedSvg operation.
     * @callback module:api/ImagingApi~createModifiedSvgCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of SVG image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {String} opts.colorType Color type for SVG image. Only RGB is supported for now. (default to Rgb)
     * @param {Boolean} opts.textAsShapes Whether text must be converted as shapes. true if all text is turned into SVG shapes in the convertion; otherwise, false (default to false)
     * @param {Number} opts.scaleX Scale X. (default to 0.0)
     * @param {Number} opts.scaleY Scale Y. (default to 0.0)
     * @param {Number} opts.pageWidth Width of the page.
     * @param {Number} opts.pageHeight Height of the page.
     * @param {Number} opts.borderX Border width. Only 0 is supported for now.
     * @param {Number} opts.borderY Border height. Only 0 is supported for now.
     * @param {String} opts.bkColor Background color (Default is white). (default to white)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
     * @param {module:api/ImagingApi~createModifiedSvgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedSvg = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedSvg");
      }


      var pathParams = {
      };
      var queryParams = {
        'colorType': opts['colorType'],
        'textAsShapes': opts['textAsShapes'],
        'scaleX': opts['scaleX'],
        'scaleY': opts['scaleY'],
        'pageWidth': opts['pageWidth'],
        'pageHeight': opts['pageHeight'],
        'borderX': opts['borderX'],
        'borderY': opts['borderY'],
        'bkColor': opts['bkColor'],
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/svg', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedTiff operation.
     * @callback module:api/ImagingApi~createModifiedTiffCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of TIFF image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} bitDepth Bit depth.
     * @param {Object} opts Optional parameters
     * @param {String} opts.compression Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.
     * @param {String} opts.resolutionUnit New resolution unit (none - the default one, inch or centimeter).
     * @param {Number} opts.horizontalResolution New horizontal resolution. (default to 0.0)
     * @param {Number} opts.verticalResolution New vertical resolution. (default to 0.0)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedTiffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedTiff = function(imageData, bitDepth, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedTiff");
      }

      // verify the required parameter 'bitDepth' is set
      if (bitDepth === undefined || bitDepth === null) {
        throw new Error("Missing the required parameter 'bitDepth' when calling createModifiedTiff");
      }


      var pathParams = {
      };
      var queryParams = {
        'bitDepth': bitDepth,
        'compression': opts['compression'],
        'resolutionUnit': opts['resolutionUnit'],
        'horizontalResolution': opts['horizontalResolution'],
        'verticalResolution': opts['verticalResolution'],
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/tiff', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedWebP operation.
     * @callback module:api/ImagingApi~createModifiedWebPCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of WEBP image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Boolean} lossLess If WEBP should be in lossless format.
     * @param {Number} quality Quality (0-100).
     * @param {Number} animLoopCount The animation loop count.
     * @param {String} animBackgroundColor Color of the animation background.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createModifiedWebPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedWebP = function(imageData, lossLess, quality, animLoopCount, animBackgroundColor, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedWebP");
      }

      // verify the required parameter 'lossLess' is set
      if (lossLess === undefined || lossLess === null) {
        throw new Error("Missing the required parameter 'lossLess' when calling createModifiedWebP");
      }

      // verify the required parameter 'quality' is set
      if (quality === undefined || quality === null) {
        throw new Error("Missing the required parameter 'quality' when calling createModifiedWebP");
      }

      // verify the required parameter 'animLoopCount' is set
      if (animLoopCount === undefined || animLoopCount === null) {
        throw new Error("Missing the required parameter 'animLoopCount' when calling createModifiedWebP");
      }

      // verify the required parameter 'animBackgroundColor' is set
      if (animBackgroundColor === undefined || animBackgroundColor === null) {
        throw new Error("Missing the required parameter 'animBackgroundColor' when calling createModifiedWebP");
      }


      var pathParams = {
      };
      var queryParams = {
        'lossLess': lossLess,
        'quality': quality,
        'animLoopCount': animLoopCount,
        'animBackgroundColor': animBackgroundColor,
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/webp', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createModifiedWmf operation.
     * @callback module:api/ImagingApi~createModifiedWmfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process existing WMF image using given parameters. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {String} bkColor Color of the background.
     * @param {Number} pageWidth Width of the page.
     * @param {Number} pageHeight Height of the page.
     * @param {Number} borderX Border width.
     * @param {Number} borderY Border height.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
     * @param {module:api/ImagingApi~createModifiedWmfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createModifiedWmf = function(imageData, bkColor, pageWidth, pageHeight, borderX, borderY, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createModifiedWmf");
      }

      // verify the required parameter 'bkColor' is set
      if (bkColor === undefined || bkColor === null) {
        throw new Error("Missing the required parameter 'bkColor' when calling createModifiedWmf");
      }

      // verify the required parameter 'pageWidth' is set
      if (pageWidth === undefined || pageWidth === null) {
        throw new Error("Missing the required parameter 'pageWidth' when calling createModifiedWmf");
      }

      // verify the required parameter 'pageHeight' is set
      if (pageHeight === undefined || pageHeight === null) {
        throw new Error("Missing the required parameter 'pageHeight' when calling createModifiedWmf");
      }

      // verify the required parameter 'borderX' is set
      if (borderX === undefined || borderX === null) {
        throw new Error("Missing the required parameter 'borderX' when calling createModifiedWmf");
      }

      // verify the required parameter 'borderY' is set
      if (borderY === undefined || borderY === null) {
        throw new Error("Missing the required parameter 'borderY' when calling createModifiedWmf");
      }


      var pathParams = {
      };
      var queryParams = {
        'bkColor': bkColor,
        'pageWidth': pageWidth,
        'pageHeight': pageHeight,
        'borderX': borderX,
        'borderY': borderY,
        'fromScratch': opts['fromScratch'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/wmf', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createObjectBounds operation.
     * @callback module:api/ImagingApi~createObjectBoundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectedObjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects objects bounds. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {String} opts.method Object detection method (default to ssd)
     * @param {Number} opts.threshold Object detection probability threshold in percents (default to 50)
     * @param {Boolean} opts.includeLabel Draw detected objects labels (default to false)
     * @param {Boolean} opts.includeScore Draw detected objects scores (default to false)
     * @param {String} opts.allowedLabels Comma-separated list of allowed labels (default to )
     * @param {String} opts.blockedLabels Comma-separated list of blocked labels (default to )
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image)
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createObjectBoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectedObjectList}
     */
    this.createObjectBounds = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createObjectBounds");
      }


      var pathParams = {
      };
      var queryParams = {
        'method': opts['method'],
        'threshold': opts['threshold'],
        'includeLabel': opts['includeLabel'],
        'includeScore': opts['includeScore'],
        'allowedLabels': opts['allowedLabels'],
        'blockedLabels': opts['blockedLabels'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = DetectedObjectList;

      return this.apiClient.callApi(
        '/imaging/ai/objectdetection/bounds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createResizedImage operation.
     * @callback module:api/ImagingApi~createResizedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resize an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} newWidth New width.
     * @param {Number} newHeight New height.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createResizedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createResizedImage = function(imageData, newWidth, newHeight, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createResizedImage");
      }

      // verify the required parameter 'newWidth' is set
      if (newWidth === undefined || newWidth === null) {
        throw new Error("Missing the required parameter 'newWidth' when calling createResizedImage");
      }

      // verify the required parameter 'newHeight' is set
      if (newHeight === undefined || newHeight === null) {
        throw new Error("Missing the required parameter 'newHeight' when calling createResizedImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'newWidth': newWidth,
        'newHeight': newHeight,
        'format': opts['format'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/resize', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRotateFlippedImage operation.
     * @callback module:api/ImagingApi~createRotateFlippedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate and/or flip an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {String} method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createRotateFlippedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createRotateFlippedImage = function(imageData, method, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createRotateFlippedImage");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling createRotateFlippedImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'method': method,
        'format': opts['format'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/rotateflip', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createUpdatedImage operation.
     * @callback module:api/ImagingApi~createUpdatedImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform scaling, cropping and flipping of an image in a single request. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} newWidth New width of the scaled image.
     * @param {Number} newHeight New height of the scaled image.
     * @param {Number} x X position of start point for cropping rectangle.
     * @param {Number} y Y position of start point for cropping rectangle.
     * @param {Number} rectWidth Width of cropping rectangle.
     * @param {Number} rectHeight Height of cropping rectangle.
     * @param {String} rotateFlipMethod RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image).
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createUpdatedImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createUpdatedImage = function(imageData, newWidth, newHeight, x, y, rectWidth, rectHeight, rotateFlipMethod, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createUpdatedImage");
      }

      // verify the required parameter 'newWidth' is set
      if (newWidth === undefined || newWidth === null) {
        throw new Error("Missing the required parameter 'newWidth' when calling createUpdatedImage");
      }

      // verify the required parameter 'newHeight' is set
      if (newHeight === undefined || newHeight === null) {
        throw new Error("Missing the required parameter 'newHeight' when calling createUpdatedImage");
      }

      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling createUpdatedImage");
      }

      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling createUpdatedImage");
      }

      // verify the required parameter 'rectWidth' is set
      if (rectWidth === undefined || rectWidth === null) {
        throw new Error("Missing the required parameter 'rectWidth' when calling createUpdatedImage");
      }

      // verify the required parameter 'rectHeight' is set
      if (rectHeight === undefined || rectHeight === null) {
        throw new Error("Missing the required parameter 'rectHeight' when calling createUpdatedImage");
      }

      // verify the required parameter 'rotateFlipMethod' is set
      if (rotateFlipMethod === undefined || rotateFlipMethod === null) {
        throw new Error("Missing the required parameter 'rotateFlipMethod' when calling createUpdatedImage");
      }


      var pathParams = {
      };
      var queryParams = {
        'newWidth': newWidth,
        'newHeight': newHeight,
        'x': x,
        'y': y,
        'rectWidth': rectWidth,
        'rectHeight': rectHeight,
        'rotateFlipMethod': rotateFlipMethod,
        'format': opts['format'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/updateImage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createVisualObjectBounds operation.
     * @callback module:api/ImagingApi~createVisualObjectBoundsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects objects bounds and draw them on the original image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream
     * @param {File} imageData Input image
     * @param {Object} opts Optional parameters
     * @param {String} opts.method Object detection method (default to ssd)
     * @param {Number} opts.threshold Object detection probability threshold in percents (default to 50)
     * @param {Boolean} opts.includeLabel Draw detected objects classes (default to false)
     * @param {Boolean} opts.includeScore Draw detected objects scores (default to false)
     * @param {String} opts.allowedLabels Comma-separated list of allowed labels (default to )
     * @param {String} opts.blockedLabels Comma-separated list of blocked labels (default to )
     * @param {String} opts.color Bounds, labels, and scores text color
     * @param {String} opts.outPath Path to updated file (if this is empty, response contains streamed image)
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~createVisualObjectBoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.createVisualObjectBounds = function(imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling createVisualObjectBounds");
      }


      var pathParams = {
      };
      var queryParams = {
        'method': opts['method'],
        'threshold': opts['threshold'],
        'includeLabel': opts['includeLabel'],
        'includeScore': opts['includeScore'],
        'allowedLabels': opts['allowedLabels'],
        'blockedLabels': opts['blockedLabels'],
        'color': opts['color'],
        'outPath': opts['outPath'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/ai/objectdetection/visualbounds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebSiteImageFeatures operation.
     * @callback module:api/ImagingApi~createWebSiteImageFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract images features from web page and add them to search context
     * @param {String} searchContextId The search context identifier.
     * @param {String} imagesSource Images source - a web page
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~createWebSiteImageFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createWebSiteImageFeatures = function(searchContextId, imagesSource, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling createWebSiteImageFeatures");
      }

      // verify the required parameter 'imagesSource' is set
      if (imagesSource === undefined || imagesSource === null) {
        throw new Error("Missing the required parameter 'imagesSource' when calling createWebSiteImageFeatures");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imagesSource': imagesSource,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/features/web', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cropImage operation.
     * @callback module:api/ImagingApi~cropImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crop an existing image.
     * @param {String} name Filename of an image.
     * @param {Number} x X position of start point for cropping rectangle.
     * @param {Number} y Y position of start point for cropping rectangle.
     * @param {Number} width Width of cropping rectangle
     * @param {Number} height Height of cropping rectangle.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~cropImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.cropImage = function(name, x, y, width, height, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling cropImage");
      }

      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling cropImage");
      }

      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling cropImage");
      }

      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling cropImage");
      }

      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling cropImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'x': x,
        'y': y,
        'width': width,
        'height': height,
        'format': opts['format'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/crop', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/ImagingApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete file
     * @param {String} path File path e.g. &#39;/folder/file.ext&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {String} opts.versionId File version ID to delete
     * @param {module:api/ImagingApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFile = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteFile");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
        'versionId': opts['versionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/file/{path}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFolder operation.
     * @callback module:api/ImagingApi~deleteFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete folder
     * @param {String} path Folder path e.g. &#39;/folder&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {Boolean} opts.recursive Enable to delete folders, subfolders and files (default to false)
     * @param {module:api/ImagingApi~deleteFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFolder = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling deleteFolder");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
        'recursive': opts['recursive'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/folder/{path}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageFeatures operation.
     * @callback module:api/ImagingApi~deleteImageFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes image features from search context.
     * @param {String} searchContextId The search context identifier.
     * @param {String} imageId The image identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~deleteImageFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteImageFeatures = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling deleteImageFeatures");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteImageFeatures");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/features', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageSearch operation.
     * @callback module:api/ImagingApi~deleteImageSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the search context.
     * @param {String} searchContextId The search context identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~deleteImageSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteImageSearch = function(searchContextId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling deleteImageSearch");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSearchImage operation.
     * @callback module:api/ImagingApi~deleteSearchImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image and images features from search context
     * @param {String} searchContextId Search context identifier.
     * @param {String} imageId Image identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder Folder.
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~deleteSearchImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSearchImage = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling deleteSearchImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteSearchImage");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/image', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deskewImage operation.
     * @callback module:api/ImagingApi~deskewImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deskew an existing image.
     * @param {String} name Image file name.
     * @param {Boolean} resizeProportionally Resize proportionally
     * @param {Object} opts Optional parameters
     * @param {String} opts.bkColor Background color
     * @param {String} opts.folder Folder
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~deskewImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.deskewImage = function(name, resizeProportionally, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deskewImage");
      }

      // verify the required parameter 'resizeProportionally' is set
      if (resizeProportionally === undefined || resizeProportionally === null) {
        throw new Error("Missing the required parameter 'resizeProportionally' when calling deskewImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'resizeProportionally': resizeProportionally,
        'bkColor': opts['bkColor'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/deskew', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFile operation.
     * @callback module:api/ImagingApi~downloadFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * @param {String} path File path e.g. &#39;/folder/file.ext&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {String} opts.versionId File version ID to download
     * @param {module:api/ImagingApi~downloadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.downloadFile = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling downloadFile");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
        'versionId': opts['versionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['multipart/form-data'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/storage/file/{path}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the extractImageFeatures operation.
     * @callback module:api/ImagingApi~extractImageFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract features from image without adding to search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId The search context identifier.
     * @param {String} imageId The image identifier.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~extractImageFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageFeatures}
     */
    this.extractImageFeatures = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling extractImageFeatures");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling extractImageFeatures");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImageFeatures;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/image2features', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the extractImageFrameProperties operation.
     * @callback module:api/ImagingApi~extractImageFramePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get separate frame properties of existing image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {Number} frameId Number of a frame.
     * @param {module:api/ImagingApi~extractImageFramePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagingResponse}
     */
    this.extractImageFrameProperties = function(imageData, frameId, callback) {
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling extractImageFrameProperties");
      }

      // verify the required parameter 'frameId' is set
      if (frameId === undefined || frameId === null) {
        throw new Error("Missing the required parameter 'frameId' when calling extractImageFrameProperties");
      }


      var pathParams = {
        'frameId': frameId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImagingResponse;

      return this.apiClient.callApi(
        '/imaging/frames/{frameId}/properties', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the extractImageProperties operation.
     * @callback module:api/ImagingApi~extractImagePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of an image. Image data is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {File} imageData Input image
     * @param {module:api/ImagingApi~extractImagePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagingResponse}
     */
    this.extractImageProperties = function(imageData, callback) {
      var postBody = null;

      // verify the required parameter 'imageData' is set
      if (imageData === undefined || imageData === null) {
        throw new Error("Missing the required parameter 'imageData' when calling extractImageProperties");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = ImagingResponse;

      return this.apiClient.callApi(
        '/imaging/properties', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the filterEffectImage operation.
     * @callback module:api/ImagingApi~filterEffectImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply filtering effects to an existing image.
     * @param {String} name Filename of an image.
     * @param {String} filterType Filter type (BigRectangular, SmallRectangular, Median, GaussWiener, MotionWiener, GaussianBlur, Sharpen, BilateralSmoothing).
     * @param {module:model/FilterPropertiesBase} filterProperties Filter properties.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~filterEffectImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.filterEffectImage = function(name, filterType, filterProperties, opts, callback) {
      opts = opts || {};
      var postBody = filterProperties;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling filterEffectImage");
      }

      // verify the required parameter 'filterType' is set
      if (filterType === undefined || filterType === null) {
        throw new Error("Missing the required parameter 'filterType' when calling filterEffectImage");
      }

      // verify the required parameter 'filterProperties' is set
      if (filterProperties === undefined || filterProperties === null) {
        throw new Error("Missing the required parameter 'filterProperties' when calling filterEffectImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'filterType': filterType,
        'format': opts['format'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json', 'application/xml'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/filterEffect', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findImageDuplicates operation.
     * @callback module:api/ImagingApi~findImageDuplicatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageDuplicatesSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find images duplicates.
     * @param {String} searchContextId The search context identifier.
     * @param {Number} similarityThreshold The similarity threshold.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~findImageDuplicatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageDuplicatesSet}
     */
    this.findImageDuplicates = function(searchContextId, similarityThreshold, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling findImageDuplicates");
      }

      // verify the required parameter 'similarityThreshold' is set
      if (similarityThreshold === undefined || similarityThreshold === null) {
        throw new Error("Missing the required parameter 'similarityThreshold' when calling findImageDuplicates");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'similarityThreshold': similarityThreshold,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageDuplicatesSet;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/findDuplicates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findImagesByTags operation.
     * @callback module:api/ImagingApi~findImagesByTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find images by tags. Tags JSON string is passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} tags Tags array for searching
     * @param {String} searchContextId The search context identifier.
     * @param {Number} similarityThreshold The similarity threshold.
     * @param {Number} maxCount The maximum count.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~findImagesByTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsSet}
     */
    this.findImagesByTags = function(tags, searchContextId, similarityThreshold, maxCount, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling findImagesByTags");
      }

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling findImagesByTags");
      }

      // verify the required parameter 'similarityThreshold' is set
      if (similarityThreshold === undefined || similarityThreshold === null) {
        throw new Error("Missing the required parameter 'similarityThreshold' when calling findImagesByTags");
      }

      // verify the required parameter 'maxCount' is set
      if (maxCount === undefined || maxCount === null) {
        throw new Error("Missing the required parameter 'maxCount' when calling findImagesByTags");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'similarityThreshold': similarityThreshold,
        'maxCount': maxCount,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'tags': tags
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SearchResultsSet;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/findByTags', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findSimilarImages operation.
     * @callback module:api/ImagingApi~findSimilarImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find similar images. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId The search context identifier.
     * @param {Number} similarityThreshold The similarity threshold.
     * @param {Number} maxCount The maximum count.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.imageId The search image identifier.
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~findSimilarImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsSet}
     */
    this.findSimilarImages = function(searchContextId, similarityThreshold, maxCount, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling findSimilarImages");
      }

      // verify the required parameter 'similarityThreshold' is set
      if (similarityThreshold === undefined || similarityThreshold === null) {
        throw new Error("Missing the required parameter 'similarityThreshold' when calling findSimilarImages");
      }

      // verify the required parameter 'maxCount' is set
      if (maxCount === undefined || maxCount === null) {
        throw new Error("Missing the required parameter 'maxCount' when calling findSimilarImages");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'similarityThreshold': similarityThreshold,
        'maxCount': maxCount,
        'imageId': opts['imageId'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = SearchResultsSet;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/findSimilar', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAvailableLabels operation.
     * @callback module:api/ImagingApi~getAvailableLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AvailableLabelsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets available labels for selected object detection method.
     * @param {String} method Object detection method
     * @param {module:api/ImagingApi~getAvailableLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AvailableLabelsList}
     */
    this.getAvailableLabels = function(method, callback) {
      var postBody = null;

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling getAvailableLabels");
      }


      var pathParams = {
        'method': method
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AvailableLabelsList;

      return this.apiClient.callApi(
        '/imaging/ai/objectdetection/availablelabels/{method}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiscUsage operation.
     * @callback module:api/ImagingApi~getDiscUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiscUsage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get disc usage
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {module:api/ImagingApi~getDiscUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiscUsage}
     */
    this.getDiscUsage = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'storageName': opts['storageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DiscUsage;

      return this.apiClient.callApi(
        '/imaging/storage/disc', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileVersions operation.
     * @callback module:api/ImagingApi~getFileVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileVersions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get file versions
     * @param {String} path File path e.g. &#39;/file.ext&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {module:api/ImagingApi~getFileVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileVersions}
     */
    this.getFileVersions = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getFileVersions");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileVersions;

      return this.apiClient.callApi(
        '/imaging/storage/version/{path}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFilesList operation.
     * @callback module:api/ImagingApi~getFilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all files and folders within a folder
     * @param {String} path Folder path e.g. &#39;/folder&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {module:api/ImagingApi~getFilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesList}
     */
    this.getFilesList = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling getFilesList");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilesList;

      return this.apiClient.callApi(
        '/imaging/storage/folder/{path}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageFeatures operation.
     * @callback module:api/ImagingApi~getImageFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageFeatures} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets image features from search context.
     * @param {String} searchContextId The search context identifier.
     * @param {String} imageId The image identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~getImageFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageFeatures}
     */
    this.getImageFeatures = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling getImageFeatures");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getImageFeatures");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageFeatures;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/features', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageFrame operation.
     * @callback module:api/ImagingApi~getImageFrameCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get separate frame from existing image.
     * @param {String} name Filename of image.
     * @param {Number} frameId Number of a frame.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.newWidth New width.
     * @param {Number} opts.newHeight New height.
     * @param {Number} opts.x X position of start point for cropping rectangle.
     * @param {Number} opts.y Y position of start point for cropping rectangle.
     * @param {Number} opts.rectWidth Width of cropping rectangle.
     * @param {Number} opts.rectHeight Height of cropping rectangle.
     * @param {String} opts.rotateFlipMethod RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
     * @param {Boolean} opts.saveOtherFrames If result will include all other frames or just a specified frame. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~getImageFrameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getImageFrame = function(name, frameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getImageFrame");
      }

      // verify the required parameter 'frameId' is set
      if (frameId === undefined || frameId === null) {
        throw new Error("Missing the required parameter 'frameId' when calling getImageFrame");
      }


      var pathParams = {
        'name': name,
        'frameId': frameId
      };
      var queryParams = {
        'newWidth': opts['newWidth'],
        'newHeight': opts['newHeight'],
        'x': opts['x'],
        'y': opts['y'],
        'rectWidth': opts['rectWidth'],
        'rectHeight': opts['rectHeight'],
        'rotateFlipMethod': opts['rotateFlipMethod'],
        'saveOtherFrames': opts['saveOtherFrames'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/frames/{frameId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageFrameProperties operation.
     * @callback module:api/ImagingApi~getImageFramePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get separate frame properties of existing image.
     * @param {String} name Filename with image.
     * @param {Number} frameId Number of a frame.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~getImageFramePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagingResponse}
     */
    this.getImageFrameProperties = function(name, frameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getImageFrameProperties");
      }

      // verify the required parameter 'frameId' is set
      if (frameId === undefined || frameId === null) {
        throw new Error("Missing the required parameter 'frameId' when calling getImageFrameProperties");
      }


      var pathParams = {
        'name': name,
        'frameId': frameId
      };
      var queryParams = {
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImagingResponse;

      return this.apiClient.callApi(
        '/imaging/{name}/frames/{frameId}/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageFrameRange operation.
     * @callback module:api/ImagingApi~getImageFrameRangeCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get frames range from existing image.
     * @param {String} name Filename of image.
     * @param {Number} startFrameId Index of the first frame in range.
     * @param {Number} endFrameId Index of the last frame in range.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.newWidth New width.
     * @param {Number} opts.newHeight New height.
     * @param {Number} opts.x X position of start point for cropping rectangle.
     * @param {Number} opts.y Y position of start point for cropping rectangle.
     * @param {Number} opts.rectWidth Width of cropping rectangle.
     * @param {Number} opts.rectHeight Height of cropping rectangle.
     * @param {String} opts.rotateFlipMethod RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
     * @param {Boolean} opts.saveOtherFrames If result will include all other frames or just a specified frame. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~getImageFrameRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getImageFrameRange = function(name, startFrameId, endFrameId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getImageFrameRange");
      }

      // verify the required parameter 'startFrameId' is set
      if (startFrameId === undefined || startFrameId === null) {
        throw new Error("Missing the required parameter 'startFrameId' when calling getImageFrameRange");
      }

      // verify the required parameter 'endFrameId' is set
      if (endFrameId === undefined || endFrameId === null) {
        throw new Error("Missing the required parameter 'endFrameId' when calling getImageFrameRange");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'startFrameId': startFrameId,
        'endFrameId': endFrameId,
        'newWidth': opts['newWidth'],
        'newHeight': opts['newHeight'],
        'x': opts['x'],
        'y': opts['y'],
        'rectWidth': opts['rectWidth'],
        'rectHeight': opts['rectHeight'],
        'rotateFlipMethod': opts['rotateFlipMethod'],
        'saveOtherFrames': opts['saveOtherFrames'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/frames/range', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageProperties operation.
     * @callback module:api/ImagingApi~getImagePropertiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImagingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get properties of an image.
     * @param {String} name Filename of an image.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~getImagePropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImagingResponse}
     */
    this.getImageProperties = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getImageProperties");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImagingResponse;

      return this.apiClient.callApi(
        '/imaging/{name}/properties', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageSearchStatus operation.
     * @callback module:api/ImagingApi~getImageSearchStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchContextStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the search context status.
     * @param {String} searchContextId The search context identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~getImageSearchStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchContextStatus}
     */
    this.getImageSearchStatus = function(searchContextId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling getImageSearchStatus");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SearchContextStatus;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getObjectBounds operation.
     * @callback module:api/ImagingApi~getObjectBoundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectedObjectList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects objects&#39; bounds
     * @param {String} name Image file name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.method Object detection method (default to ssd)
     * @param {Number} opts.threshold Object detection probability threshold in percents (default to 50)
     * @param {Boolean} opts.includeLabel Return detected objects labels (default to false)
     * @param {Boolean} opts.includeScore Return detected objects score (default to false)
     * @param {String} opts.allowedLabels Comma-separated list of allowed labels (default to )
     * @param {String} opts.blockedLabels Comma-separated list of blocked labels (default to )
     * @param {String} opts.folder Folder
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~getObjectBoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectedObjectList}
     */
    this.getObjectBounds = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getObjectBounds");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'method': opts['method'],
        'threshold': opts['threshold'],
        'includeLabel': opts['includeLabel'],
        'includeScore': opts['includeScore'],
        'allowedLabels': opts['allowedLabels'],
        'blockedLabels': opts['blockedLabels'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DetectedObjectList;

      return this.apiClient.callApi(
        '/imaging/ai/objectdetection/{name}/bounds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSearchImage operation.
     * @callback module:api/ImagingApi~getSearchImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get image from search context
     * @param {String} searchContextId Search context identifier.
     * @param {String} imageId Image identifier.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder Folder.
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~getSearchImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getSearchImage = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling getSearchImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling getSearchImage");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/image', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getVisualObjectBounds operation.
     * @callback module:api/ImagingApi~getVisualObjectBoundsCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects objects bounds and draw them on the original image
     * @param {String} name The image features detector.
     * @param {Object} opts Optional parameters
     * @param {String} opts.method Object detection method (default to ssd)
     * @param {Number} opts.threshold Object detection probability threshold in percents (default to 50)
     * @param {Boolean} opts.includeLabel Draw detected objects labels (default to false)
     * @param {Boolean} opts.includeScore Draw detected objects scores (default to false)
     * @param {String} opts.allowedLabels Comma-separated list of allowed labels (default to )
     * @param {String} opts.blockedLabels Comma-separated list of blocked labels (default to )
     * @param {String} opts.color Bounds, labels, and scores text color
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~getVisualObjectBoundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getVisualObjectBounds = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getVisualObjectBounds");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'method': opts['method'],
        'threshold': opts['threshold'],
        'includeLabel': opts['includeLabel'],
        'includeScore': opts['includeScore'],
        'allowedLabels': opts['allowedLabels'],
        'blockedLabels': opts['blockedLabels'],
        'color': opts['color'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/ai/objectdetection/{name}/visualbounds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the grayscaleImage operation.
     * @callback module:api/ImagingApi~grayscaleImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Grayscale an existing image.
     * @param {String} name Image file name.
     * @param {Object} opts Optional parameters
     * @param {String} opts.folder Folder
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~grayscaleImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.grayscaleImage = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling grayscaleImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/grayscale', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyBmp operation.
     * @callback module:api/ImagingApi~modifyBmpCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing BMP image.
     * @param {String} name Filename of image.
     * @param {Number} bitsPerPixel Color depth.
     * @param {Number} horizontalResolution New horizontal resolution.
     * @param {Number} verticalResolution New vertical resolution.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyBmpCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyBmp = function(name, bitsPerPixel, horizontalResolution, verticalResolution, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyBmp");
      }

      // verify the required parameter 'bitsPerPixel' is set
      if (bitsPerPixel === undefined || bitsPerPixel === null) {
        throw new Error("Missing the required parameter 'bitsPerPixel' when calling modifyBmp");
      }

      // verify the required parameter 'horizontalResolution' is set
      if (horizontalResolution === undefined || horizontalResolution === null) {
        throw new Error("Missing the required parameter 'horizontalResolution' when calling modifyBmp");
      }

      // verify the required parameter 'verticalResolution' is set
      if (verticalResolution === undefined || verticalResolution === null) {
        throw new Error("Missing the required parameter 'verticalResolution' when calling modifyBmp");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'bitsPerPixel': bitsPerPixel,
        'horizontalResolution': horizontalResolution,
        'verticalResolution': verticalResolution,
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/bmp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyEmf operation.
     * @callback module:api/ImagingApi~modifyEmfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process existing EMF imaging using given parameters.
     * @param {String} name Filename of image.
     * @param {String} bkColor Color of the background.
     * @param {Number} pageWidth Width of the page.
     * @param {Number} pageHeight Height of the page.
     * @param {Number} borderX Border width.
     * @param {Number} borderY Border height.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
     * @param {module:api/ImagingApi~modifyEmfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyEmf = function(name, bkColor, pageWidth, pageHeight, borderX, borderY, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyEmf");
      }

      // verify the required parameter 'bkColor' is set
      if (bkColor === undefined || bkColor === null) {
        throw new Error("Missing the required parameter 'bkColor' when calling modifyEmf");
      }

      // verify the required parameter 'pageWidth' is set
      if (pageWidth === undefined || pageWidth === null) {
        throw new Error("Missing the required parameter 'pageWidth' when calling modifyEmf");
      }

      // verify the required parameter 'pageHeight' is set
      if (pageHeight === undefined || pageHeight === null) {
        throw new Error("Missing the required parameter 'pageHeight' when calling modifyEmf");
      }

      // verify the required parameter 'borderX' is set
      if (borderX === undefined || borderX === null) {
        throw new Error("Missing the required parameter 'borderX' when calling modifyEmf");
      }

      // verify the required parameter 'borderY' is set
      if (borderY === undefined || borderY === null) {
        throw new Error("Missing the required parameter 'borderY' when calling modifyEmf");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'bkColor': bkColor,
        'pageWidth': pageWidth,
        'pageHeight': pageHeight,
        'borderX': borderX,
        'borderY': borderY,
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/emf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyGif operation.
     * @callback module:api/ImagingApi~modifyGifCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing GIF image.
     * @param {String} name Filename of image.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.backgroundColorIndex Index of the background color. (default to 32)
     * @param {Number} opts.colorResolution Color resolution. (default to 3)
     * @param {Boolean} opts.hasTrailer Specifies if image has trailer. (default to true)
     * @param {Boolean} opts.interlaced Specifies if image is interlaced. (default to true)
     * @param {Boolean} opts.isPaletteSorted Specifies if palette is sorted. (default to false)
     * @param {Number} opts.pixelAspectRatio Pixel aspect ratio. (default to 3)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to true)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyGifCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyGif = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyGif");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'backgroundColorIndex': opts['backgroundColorIndex'],
        'colorResolution': opts['colorResolution'],
        'hasTrailer': opts['hasTrailer'],
        'interlaced': opts['interlaced'],
        'isPaletteSorted': opts['isPaletteSorted'],
        'pixelAspectRatio': opts['pixelAspectRatio'],
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/gif', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyJpeg operation.
     * @callback module:api/ImagingApi~modifyJpegCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing JPEG image.
     * @param {String} name Filename of image.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.quality Quality of an image from 0 to 100. Default is 75. (default to 75)
     * @param {String} opts.compressionType Compression type: baseline (default), progressive, lossless or jpegls. (default to baseline)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyJpegCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyJpeg = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyJpeg");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'quality': opts['quality'],
        'compressionType': opts['compressionType'],
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/jpg', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyJpeg2000 operation.
     * @callback module:api/ImagingApi~modifyJpeg2000Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing JPEG2000 image.
     * @param {String} name Filename of image.
     * @param {String} comment The comment (can be either single or comma-separated).
     * @param {Object} opts Optional parameters
     * @param {String} opts.codec The codec (j2k or jp2). (default to j2k)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyJpeg2000Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyJpeg2000 = function(name, comment, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyJpeg2000");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling modifyJpeg2000");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'comment': comment,
        'codec': opts['codec'],
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/jpg2000', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyPsd operation.
     * @callback module:api/ImagingApi~modifyPsdCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing PSD image.
     * @param {String} name Filename of image.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.channelsCount Count of color channels. (default to 4)
     * @param {String} opts.compressionMethod Compression method (for now, raw and RLE are supported). (default to rle)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyPsdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyPsd = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyPsd");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'channelsCount': opts['channelsCount'],
        'compressionMethod': opts['compressionMethod'],
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/psd', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifySvg operation.
     * @callback module:api/ImagingApi~modifySvgCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing SVG image.
     * @param {String} name Filename of image.
     * @param {Object} opts Optional parameters
     * @param {String} opts.colorType Color type for SVG image. Only RGB is supported for now. (default to Rgb)
     * @param {Boolean} opts.textAsShapes Whether text must be converted as shapes. true if all text is turned into SVG shapes in the convertion; otherwise, false (default to false)
     * @param {Number} opts.scaleX Scale X. (default to 0.0)
     * @param {Number} opts.scaleY Scale Y. (default to 0.0)
     * @param {Number} opts.pageWidth Width of the page.
     * @param {Number} opts.pageHeight Height of the page.
     * @param {Number} opts.borderX Border width. Only 0 is supported for now.
     * @param {Number} opts.borderY Border height. Only 0 is supported for now.
     * @param {String} opts.bkColor Background color (Default is white). (default to white)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to svg)
     * @param {module:api/ImagingApi~modifySvgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifySvg = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifySvg");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'colorType': opts['colorType'],
        'textAsShapes': opts['textAsShapes'],
        'scaleX': opts['scaleX'],
        'scaleY': opts['scaleY'],
        'pageWidth': opts['pageWidth'],
        'pageHeight': opts['pageHeight'],
        'borderX': opts['borderX'],
        'borderY': opts['borderY'],
        'bkColor': opts['bkColor'],
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/svg', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyTiff operation.
     * @callback module:api/ImagingApi~modifyTiffCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing TIFF image.
     * @param {String} name Filename of image.
     * @param {Number} bitDepth Bit depth.
     * @param {Object} opts Optional parameters
     * @param {String} opts.compression Compression (none is default). Please, refer to https://apireference.aspose.com/net/imaging/aspose.imaging.fileformats.tiff.enums/tiffcompressions for all possible values.
     * @param {String} opts.resolutionUnit New resolution unit (none - the default one, inch or centimeter).
     * @param {Number} opts.horizontalResolution New horizontal resolution. (default to 0.0)
     * @param {Number} opts.verticalResolution New vertical resolution. (default to 0.0)
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyTiffCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyTiff = function(name, bitDepth, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyTiff");
      }

      // verify the required parameter 'bitDepth' is set
      if (bitDepth === undefined || bitDepth === null) {
        throw new Error("Missing the required parameter 'bitDepth' when calling modifyTiff");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'bitDepth': bitDepth,
        'compression': opts['compression'],
        'resolutionUnit': opts['resolutionUnit'],
        'horizontalResolution': opts['horizontalResolution'],
        'verticalResolution': opts['verticalResolution'],
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/tiff', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyWebP operation.
     * @callback module:api/ImagingApi~modifyWebPCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update parameters of existing WEBP image.
     * @param {String} name Filename of image.
     * @param {Boolean} lossLess If WEBP should be in lossless format.
     * @param {Number} quality Quality (0-100).
     * @param {Number} animLoopCount The animation loop count.
     * @param {String} animBackgroundColor Color of the animation background.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~modifyWebPCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyWebP = function(name, lossLess, quality, animLoopCount, animBackgroundColor, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyWebP");
      }

      // verify the required parameter 'lossLess' is set
      if (lossLess === undefined || lossLess === null) {
        throw new Error("Missing the required parameter 'lossLess' when calling modifyWebP");
      }

      // verify the required parameter 'quality' is set
      if (quality === undefined || quality === null) {
        throw new Error("Missing the required parameter 'quality' when calling modifyWebP");
      }

      // verify the required parameter 'animLoopCount' is set
      if (animLoopCount === undefined || animLoopCount === null) {
        throw new Error("Missing the required parameter 'animLoopCount' when calling modifyWebP");
      }

      // verify the required parameter 'animBackgroundColor' is set
      if (animBackgroundColor === undefined || animBackgroundColor === null) {
        throw new Error("Missing the required parameter 'animBackgroundColor' when calling modifyWebP");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'lossLess': lossLess,
        'quality': quality,
        'animLoopCount': animLoopCount,
        'animBackgroundColor': animBackgroundColor,
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/webp', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the modifyWmf operation.
     * @callback module:api/ImagingApi~modifyWmfCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Process existing WMF image using given parameters.
     * @param {String} name Filename of image.
     * @param {String} bkColor Color of the background.
     * @param {Number} pageWidth Width of the page.
     * @param {Number} pageHeight Height of the page.
     * @param {Number} borderX Border width.
     * @param {Number} borderY Border height.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fromScratch Specifies where additional parameters we do not support should be taken from. If this is true – they will be taken from default values for standard image, if it is false – they will be saved from current image. Default is false. (default to false)
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {String} opts.format Export format (PNG is the default one). Please, refer to the export table from https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases. (default to png)
     * @param {module:api/ImagingApi~modifyWmfCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.modifyWmf = function(name, bkColor, pageWidth, pageHeight, borderX, borderY, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling modifyWmf");
      }

      // verify the required parameter 'bkColor' is set
      if (bkColor === undefined || bkColor === null) {
        throw new Error("Missing the required parameter 'bkColor' when calling modifyWmf");
      }

      // verify the required parameter 'pageWidth' is set
      if (pageWidth === undefined || pageWidth === null) {
        throw new Error("Missing the required parameter 'pageWidth' when calling modifyWmf");
      }

      // verify the required parameter 'pageHeight' is set
      if (pageHeight === undefined || pageHeight === null) {
        throw new Error("Missing the required parameter 'pageHeight' when calling modifyWmf");
      }

      // verify the required parameter 'borderX' is set
      if (borderX === undefined || borderX === null) {
        throw new Error("Missing the required parameter 'borderX' when calling modifyWmf");
      }

      // verify the required parameter 'borderY' is set
      if (borderY === undefined || borderY === null) {
        throw new Error("Missing the required parameter 'borderY' when calling modifyWmf");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'bkColor': bkColor,
        'pageWidth': pageWidth,
        'pageHeight': pageHeight,
        'borderX': borderX,
        'borderY': borderY,
        'fromScratch': opts['fromScratch'],
        'folder': opts['folder'],
        'storage': opts['storage'],
        'format': opts['format'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/wmf', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveFile operation.
     * @callback module:api/ImagingApi~moveFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move file
     * @param {String} srcPath Source file path e.g. &#39;/src.ext&#39;
     * @param {String} destPath Destination file path e.g. &#39;/dest.ext&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.srcStorageName Source storage name
     * @param {String} opts.destStorageName Destination storage name
     * @param {String} opts.versionId File version ID to move
     * @param {module:api/ImagingApi~moveFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.moveFile = function(srcPath, destPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'srcPath' is set
      if (srcPath === undefined || srcPath === null) {
        throw new Error("Missing the required parameter 'srcPath' when calling moveFile");
      }

      // verify the required parameter 'destPath' is set
      if (destPath === undefined || destPath === null) {
        throw new Error("Missing the required parameter 'destPath' when calling moveFile");
      }


      var pathParams = {
        'srcPath': srcPath
      };
      var queryParams = {
        'destPath': destPath,
        'srcStorageName': opts['srcStorageName'],
        'destStorageName': opts['destStorageName'],
        'versionId': opts['versionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/file/move/{srcPath}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the moveFolder operation.
     * @callback module:api/ImagingApi~moveFolderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move folder
     * @param {String} srcPath Folder path to move e.g. &#39;/folder&#39;
     * @param {String} destPath Destination folder path to move to e.g &#39;/dst&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.srcStorageName Source storage name
     * @param {String} opts.destStorageName Destination storage name
     * @param {module:api/ImagingApi~moveFolderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.moveFolder = function(srcPath, destPath, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'srcPath' is set
      if (srcPath === undefined || srcPath === null) {
        throw new Error("Missing the required parameter 'srcPath' when calling moveFolder");
      }

      // verify the required parameter 'destPath' is set
      if (destPath === undefined || destPath === null) {
        throw new Error("Missing the required parameter 'destPath' when calling moveFolder");
      }


      var pathParams = {
        'srcPath': srcPath
      };
      var queryParams = {
        'destPath': destPath,
        'srcStorageName': opts['srcStorageName'],
        'destStorageName': opts['destStorageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/storage/folder/move/{srcPath}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the objectExists operation.
     * @callback module:api/ImagingApi~objectExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectExist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if file or folder exists
     * @param {String} path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {String} opts.versionId File version ID
     * @param {module:api/ImagingApi~objectExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectExist}
     */
    this.objectExists = function(path, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling objectExists");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
        'versionId': opts['versionId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ObjectExist;

      return this.apiClient.callApi(
        '/imaging/storage/exist/{path}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resizeImage operation.
     * @callback module:api/ImagingApi~resizeImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resize an existing image.
     * @param {String} name Filename of an image.
     * @param {Number} newWidth New width.
     * @param {Number} newHeight New height.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~resizeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.resizeImage = function(name, newWidth, newHeight, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling resizeImage");
      }

      // verify the required parameter 'newWidth' is set
      if (newWidth === undefined || newWidth === null) {
        throw new Error("Missing the required parameter 'newWidth' when calling resizeImage");
      }

      // verify the required parameter 'newHeight' is set
      if (newHeight === undefined || newHeight === null) {
        throw new Error("Missing the required parameter 'newHeight' when calling resizeImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'newWidth': newWidth,
        'newHeight': newHeight,
        'format': opts['format'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/resize', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rotateFlipImage operation.
     * @callback module:api/ImagingApi~rotateFlipImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate and/or flip an existing image.
     * @param {String} name Filename of an image.
     * @param {String} method RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY).
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~rotateFlipImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.rotateFlipImage = function(name, method, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling rotateFlipImage");
      }

      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling rotateFlipImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'method': method,
        'format': opts['format'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/rotateflip', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the storageExists operation.
     * @callback module:api/ImagingApi~storageExistsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StorageExist} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if storage exists
     * @param {String} storageName Storage name
     * @param {module:api/ImagingApi~storageExistsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StorageExist}
     */
    this.storageExists = function(storageName, callback) {
      var postBody = null;

      // verify the required parameter 'storageName' is set
      if (storageName === undefined || storageName === null) {
        throw new Error("Missing the required parameter 'storageName' when calling storageExists");
      }


      var pathParams = {
        'storageName': storageName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StorageExist;

      return this.apiClient.callApi(
        '/imaging/storage/{storageName}/exist', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImage operation.
     * @callback module:api/ImagingApi~updateImageCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform scaling, cropping and flipping of an existing image in a single request.
     * @param {String} name Filename of an image.
     * @param {Number} newWidth New width of the scaled image.
     * @param {Number} newHeight New height of the scaled image.
     * @param {Number} x X position of start point for cropping rectangle.
     * @param {Number} y Y position of start point for cropping rectangle.
     * @param {Number} rectWidth Width of cropping rectangle.
     * @param {Number} rectHeight Height of cropping rectangle.
     * @param {String} rotateFlipMethod RotateFlip method (Rotate180FlipNone, Rotate180FlipX, Rotate180FlipXY, Rotate180FlipY, Rotate270FlipNone, Rotate270FlipX, Rotate270FlipXY, Rotate270FlipY, Rotate90FlipNone, Rotate90FlipX, Rotate90FlipXY, Rotate90FlipY, RotateNoneFlipNone, RotateNoneFlipX, RotateNoneFlipXY, RotateNoneFlipY). Default is RotateNoneFlipNone.
     * @param {Object} opts Optional parameters
     * @param {String} opts.format Resulting image format. Please, refer to https://docs.aspose.cloud/display/imagingcloud/Supported+File+Formats#SupportedFileFormats-CommonOperationsFormatSupportMap for possible use-cases.
     * @param {String} opts.folder Folder with image to process.
     * @param {String} opts.storage Your Aspose Cloud Storage name.
     * @param {module:api/ImagingApi~updateImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.updateImage = function(name, newWidth, newHeight, x, y, rectWidth, rectHeight, rotateFlipMethod, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateImage");
      }

      // verify the required parameter 'newWidth' is set
      if (newWidth === undefined || newWidth === null) {
        throw new Error("Missing the required parameter 'newWidth' when calling updateImage");
      }

      // verify the required parameter 'newHeight' is set
      if (newHeight === undefined || newHeight === null) {
        throw new Error("Missing the required parameter 'newHeight' when calling updateImage");
      }

      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling updateImage");
      }

      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling updateImage");
      }

      // verify the required parameter 'rectWidth' is set
      if (rectWidth === undefined || rectWidth === null) {
        throw new Error("Missing the required parameter 'rectWidth' when calling updateImage");
      }

      // verify the required parameter 'rectHeight' is set
      if (rectHeight === undefined || rectHeight === null) {
        throw new Error("Missing the required parameter 'rectHeight' when calling updateImage");
      }

      // verify the required parameter 'rotateFlipMethod' is set
      if (rotateFlipMethod === undefined || rotateFlipMethod === null) {
        throw new Error("Missing the required parameter 'rotateFlipMethod' when calling updateImage");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'newWidth': newWidth,
        'newHeight': newHeight,
        'x': x,
        'y': y,
        'rectWidth': rectWidth,
        'rectHeight': rectHeight,
        'rotateFlipMethod': rotateFlipMethod,
        'format': opts['format'],
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['JWT'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/imaging/{name}/updateImage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateImageFeatures operation.
     * @callback module:api/ImagingApi~updateImageFeaturesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId The search context identifier.
     * @param {String} imageId The image identifier.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.folder The folder.
     * @param {String} opts.storage The storage.
     * @param {module:api/ImagingApi~updateImageFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateImageFeatures = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling updateImageFeatures");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling updateImageFeatures");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/features', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSearchImage operation.
     * @callback module:api/ImagingApi~updateSearchImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update image and images features in search context. Image data may be passed as zero-indexed multipart/form-data content or as raw body stream.
     * @param {String} searchContextId Search context identifier.
     * @param {String} imageId Image identifier.
     * @param {Object} opts Optional parameters
     * @param {File} opts.imageData Input image
     * @param {String} opts.folder Folder.
     * @param {String} opts.storage Storage
     * @param {module:api/ImagingApi~updateSearchImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.updateSearchImage = function(searchContextId, imageId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'searchContextId' is set
      if (searchContextId === undefined || searchContextId === null) {
        throw new Error("Missing the required parameter 'searchContextId' when calling updateSearchImage");
      }

      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling updateSearchImage");
      }


      var pathParams = {
        'searchContextId': searchContextId
      };
      var queryParams = {
        'imageId': imageId,
        'folder': opts['folder'],
        'storage': opts['storage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageData': opts['imageData']
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/imaging/ai/imageSearch/{searchContextId}/image', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/ImagingApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FilesUploadResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * @param {String} path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
     * @param {File} file File to upload
     * @param {Object} opts Optional parameters
     * @param {String} opts.storageName Storage name
     * @param {module:api/ImagingApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FilesUploadResult}
     */
    this.uploadFile = function(path, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling uploadFile");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFile");
      }


      var pathParams = {
        'path': path
      };
      var queryParams = {
        'storageName': opts['storageName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'File': file
      };

      var authNames = ['JWT'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = FilesUploadResult;

      return this.apiClient.callApi(
        '/imaging/storage/file/{path}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
