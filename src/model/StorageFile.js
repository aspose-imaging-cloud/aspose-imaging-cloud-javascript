/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AsposeimagingCloudApiReference) {
      root.AsposeimagingCloudApiReference = {};
    }
    root.AsposeimagingCloudApiReference.StorageFile = factory(root.AsposeimagingCloudApiReference.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The StorageFile model module.
   * @module model/StorageFile
   * @version 3.0
   */

  /**
   * Constructs a new <code>StorageFile</code>.
   * File or folder information
   * @alias module:model/StorageFile
   * @class
   * @param isFolder {Boolean} True if it is a folder.
   * @param size {Number} File or folder size.
   */
  var exports = function(isFolder, size) {
    var _this = this;


    _this['IsFolder'] = isFolder;

    _this['Size'] = size;

  };

  /**
   * Constructs a <code>StorageFile</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/StorageFile} obj Optional instance to populate.
   * @return {module:model/StorageFile} The populated <code>StorageFile</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Name')) {
        obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
      }
      if (data.hasOwnProperty('IsFolder')) {
        obj['IsFolder'] = ApiClient.convertToType(data['IsFolder'], 'Boolean');
      }
      if (data.hasOwnProperty('ModifiedDate')) {
        obj['ModifiedDate'] = ApiClient.convertToType(data['ModifiedDate'], 'Date');
      }
      if (data.hasOwnProperty('Size')) {
        obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
      }
      if (data.hasOwnProperty('Path')) {
        obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
      }
    }
    return obj;
  }

  /**
   * File or folder name.
   * @member {String} Name
   */
  exports.prototype['Name'] = undefined;
  /**
   * True if it is a folder.
   * @member {Boolean} IsFolder
   */
  exports.prototype['IsFolder'] = undefined;
  /**
   * File or folder last modified DateTime.
   * @member {Date} ModifiedDate
   */
  exports.prototype['ModifiedDate'] = undefined;
  /**
   * File or folder size.
   * @member {Number} Size
   */
  exports.prototype['Size'] = undefined;
  /**
   * File or folder path.
   * @member {String} Path
   */
  exports.prototype['Path'] = undefined;



  return exports;
}));


