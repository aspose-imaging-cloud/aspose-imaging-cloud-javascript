/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FilterPropertiesBase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FilterPropertiesBase'));
  } else {
    // Browser globals (root is window)
    if (!root.AsposeimagingCloudApiReference) {
      root.AsposeimagingCloudApiReference = {};
    }
    root.AsposeimagingCloudApiReference.BilateralSmoothingFilterProperties = factory(root.AsposeimagingCloudApiReference.ApiClient, root.AsposeimagingCloudApiReference.FilterPropertiesBase);
  }
}(this, function(ApiClient, FilterPropertiesBase) {
  'use strict';




  /**
   * The BilateralSmoothingFilterProperties model module.
   * @module model/BilateralSmoothingFilterProperties
   * @version 3.0
   */

  /**
   * Constructs a new <code>BilateralSmoothingFilterProperties</code>.
   * The Bilateral Smoothing Filter Options.
   * @alias module:model/BilateralSmoothingFilterProperties
   * @class
   * @extends module:model/FilterPropertiesBase
   * @param discriminator {String} 
   * @param size {Number} Gets or sets the size of the kernel.
   * @param spatialFactor {Number} Gets or sets the spatial factor.
   * @param spatialPower {Number} Gets or sets the spatial power.
   * @param colorFactor {Number} Gets or sets the color factor.
   * @param colorPower {Number} Gets or sets the color power.
   */
  var exports = function(discriminator, size, spatialFactor, spatialPower, colorFactor, colorPower) {
    var _this = this;
    FilterPropertiesBase.call(_this, discriminator);
    _this['Size'] = size;
    _this['SpatialFactor'] = spatialFactor;
    _this['SpatialPower'] = spatialPower;
    _this['ColorFactor'] = colorFactor;
    _this['ColorPower'] = colorPower;
  };

  /**
   * Constructs a <code>BilateralSmoothingFilterProperties</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/BilateralSmoothingFilterProperties} obj Optional instance to populate.
   * @return {module:model/BilateralSmoothingFilterProperties} The populated <code>BilateralSmoothingFilterProperties</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      FilterPropertiesBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('Size')) {
        obj['Size'] = ApiClient.convertToType(data['Size'], 'Number');
      }
      if (data.hasOwnProperty('SpatialFactor')) {
        obj['SpatialFactor'] = ApiClient.convertToType(data['SpatialFactor'], 'Number');
      }
      if (data.hasOwnProperty('SpatialPower')) {
        obj['SpatialPower'] = ApiClient.convertToType(data['SpatialPower'], 'Number');
      }
      if (data.hasOwnProperty('ColorFactor')) {
        obj['ColorFactor'] = ApiClient.convertToType(data['ColorFactor'], 'Number');
      }
      if (data.hasOwnProperty('ColorPower')) {
        obj['ColorPower'] = ApiClient.convertToType(data['ColorPower'], 'Number');
      }
    }
    return obj;
  }

  exports.prototype = Object.create(FilterPropertiesBase.prototype);
  exports.prototype.constructor = exports;

  /**
   * Gets or sets the size of the kernel.
   * @member {Number} Size
   */
  exports.prototype['Size'] = undefined;
  /**
   * Gets or sets the spatial factor.
   * @member {Number} SpatialFactor
   */
  exports.prototype['SpatialFactor'] = undefined;
  /**
   * Gets or sets the spatial power.
   * @member {Number} SpatialPower
   */
  exports.prototype['SpatialPower'] = undefined;
  /**
   * Gets or sets the color factor.
   * @member {Number} ColorFactor
   */
  exports.prototype['ColorFactor'] = undefined;
  /**
   * Gets or sets the color power.
   * @member {Number} ColorPower
   */
  exports.prototype['ColorPower'] = undefined;



  return exports;
}));


