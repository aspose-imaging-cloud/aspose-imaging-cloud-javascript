/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ExifData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ExifData'));
  } else {
    // Browser globals (root is window)
    if (!root.AsposeimagingCloudApiReference) {
      root.AsposeimagingCloudApiReference = {};
    }
    root.AsposeimagingCloudApiReference.JpegExifData = factory(root.AsposeimagingCloudApiReference.ApiClient, root.AsposeimagingCloudApiReference.ExifData);
  }
}(this, function(ApiClient, ExifData) {
  'use strict';




  /**
   * The JpegExifData model module.
   * @module model/JpegExifData
   * @version 3.0
   */

  /**
   * Constructs a new <code>JpegExifData</code>.
   * Represents EXIF data for JPEG
   * @alias module:model/JpegExifData
   * @class
   * @extends module:model/ExifData
   * @param apertureValue {Number} Gets or sets the aperture.
   * @param brightnessValue {Number} Gets or sets the brightness.
   * @param compressedBitsPerPixel {Number} Gets or sets the compressed bits per pixel.
   * @param digitalZoomRatio {Number} Gets or sets the digital zoom ratio.
   * @param exposureBiasValue {Number} Gets or sets the exposure bias.
   * @param exposureIndex {Number} Gets or sets the exposure index.
   * @param exposureTime {Number} Gets or sets the exposure time.
   * @param fNumber {Number} Gets or sets the focal number.
   * @param flashEnergy {Number} Gets or sets the flash energy.
   * @param focalLength {Number} Gets or sets the focal length.
   * @param focalLengthIn35MmFilm {Number} Gets or sets the focal length in 35mm film.
   * @param focalPlaneXResolution {Number} Gets or sets the focal plane X resolution.
   * @param focalPlaneYResolution {Number} Gets or sets the focal plane Y resolution.
   * @param gPSAltitude {Number} Gets or sets the GPS altitude.
   * @param GPSDOP {Number} Gets or sets the GPS DOP (data degree of precision).
   * @param gPSDestBearing {Number} Gets or sets the GPS bearing of the destination.
   * @param gPSDestDistance {Number} Gets or sets the GPS destination distance.
   * @param gPSDifferential {Number} Gets or sets the GPS differential.
   * @param gPSImgDirection {Number} Gets or sets the GPS image direction.
   * @param gPSSpeed {Number} Gets or sets the GPS speed.
   * @param gamma {Number} Gets or sets the gamma.
   * @param iSOSpeed {Number} Gets or sets the ISO speed.
   * @param iSOSpeedLatitudeYYY {Number} Gets or sets the ISO speed latitude YYY value.
   * @param iSOSpeedLatitudeZZZ {Number} Gets or sets the ISO speed latitude ZZZ value.
   * @param photographicSensitivity {Number} Gets or sets the photographic sensitivity.
   * @param maxApertureValue {Number} Gets or sets the max aperture.
   * @param pixelXDimension {Number} Gets or sets the pixel X dimension.
   * @param pixelYDimension {Number} Gets or sets the pixel Y dimension.
   * @param recommendedExposureIndex {Number} Gets or sets the recommended exposure index.
   * @param sceneType {Number} Gets or sets the scene type.
   * @param sensitivityType {Number} Gets or sets the sensitivity type.
   * @param sharpness {Number} Gets or sets the sharpness.
   * @param shutterSpeedValue {Number} Gets or sets the shutter speed.
   * @param standardOutputSensitivity {Number} Gets or sets the standard output sensitivity.
   * @param subjectDistance {Number} Gets or sets the subject distance.
   * @param xResolution {Number} Gets or sets the X resolution.
   * @param yResolution {Number} Gets or sets the Y resolution.
   */
  var exports = function(apertureValue, brightnessValue, compressedBitsPerPixel, digitalZoomRatio, exposureBiasValue, exposureIndex, exposureTime, fNumber, flashEnergy, focalLength, focalLengthIn35MmFilm, focalPlaneXResolution, focalPlaneYResolution, gPSAltitude, GPSDOP, gPSDestBearing, gPSDestDistance, gPSDifferential, gPSImgDirection, gPSSpeed, gamma, iSOSpeed, iSOSpeedLatitudeYYY, iSOSpeedLatitudeZZZ, photographicSensitivity, maxApertureValue, pixelXDimension, pixelYDimension, recommendedExposureIndex, sceneType, sensitivityType, sharpness, shutterSpeedValue, standardOutputSensitivity, subjectDistance, xResolution, yResolution) {
    var _this = this;
    ExifData.call(_this, apertureValue, brightnessValue, compressedBitsPerPixel, digitalZoomRatio, exposureBiasValue, exposureIndex, exposureTime, fNumber, flashEnergy, focalLength, focalLengthIn35MmFilm, focalPlaneXResolution, focalPlaneYResolution, gPSAltitude, GPSDOP, gPSDestBearing, gPSDestDistance, gPSDifferential, gPSImgDirection, gPSSpeed, gamma, iSOSpeed, iSOSpeedLatitudeYYY, iSOSpeedLatitudeZZZ, photographicSensitivity, maxApertureValue, pixelXDimension, pixelYDimension, recommendedExposureIndex, sceneType, sensitivityType, sharpness, shutterSpeedValue, standardOutputSensitivity, subjectDistance);












    _this['XResolution'] = xResolution;


    _this['YResolution'] = yResolution;
  };

  /**
   * Constructs a <code>JpegExifData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/JpegExifData} obj Optional instance to populate.
   * @return {module:model/JpegExifData} The populated <code>JpegExifData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      ExifData.constructFromObject(data, obj);
      if (data.hasOwnProperty('Artist')) {
        obj['Artist'] = ApiClient.convertToType(data['Artist'], 'String');
      }
      if (data.hasOwnProperty('Copyright')) {
        obj['Copyright'] = ApiClient.convertToType(data['Copyright'], 'String');
      }
      if (data.hasOwnProperty('DateTime')) {
        obj['DateTime'] = ApiClient.convertToType(data['DateTime'], 'String');
      }
      if (data.hasOwnProperty('ImageDescription')) {
        obj['ImageDescription'] = ApiClient.convertToType(data['ImageDescription'], 'String');
      }
      if (data.hasOwnProperty('Make')) {
        obj['Make'] = ApiClient.convertToType(data['Make'], 'String');
      }
      if (data.hasOwnProperty('Model')) {
        obj['Model'] = ApiClient.convertToType(data['Model'], 'String');
      }
      if (data.hasOwnProperty('Orientation')) {
        obj['Orientation'] = ApiClient.convertToType(data['Orientation'], 'String');
      }
      if (data.hasOwnProperty('PrimaryChromaticities')) {
        obj['PrimaryChromaticities'] = ApiClient.convertToType(data['PrimaryChromaticities'], ['Number']);
      }
      if (data.hasOwnProperty('ReferenceBlackWhite')) {
        obj['ReferenceBlackWhite'] = ApiClient.convertToType(data['ReferenceBlackWhite'], ['Number']);
      }
      if (data.hasOwnProperty('ResolutionUnit')) {
        obj['ResolutionUnit'] = ApiClient.convertToType(data['ResolutionUnit'], 'String');
      }
      if (data.hasOwnProperty('Software')) {
        obj['Software'] = ApiClient.convertToType(data['Software'], 'String');
      }
      if (data.hasOwnProperty('TransferFunction')) {
        obj['TransferFunction'] = ApiClient.convertToType(data['TransferFunction'], ['Number']);
      }
      if (data.hasOwnProperty('XResolution')) {
        obj['XResolution'] = ApiClient.convertToType(data['XResolution'], 'Number');
      }
      if (data.hasOwnProperty('YCbCrCoefficients')) {
        obj['YCbCrCoefficients'] = ApiClient.convertToType(data['YCbCrCoefficients'], ['Number']);
      }
      if (data.hasOwnProperty('YCbCrPositioning')) {
        obj['YCbCrPositioning'] = ApiClient.convertToType(data['YCbCrPositioning'], 'String');
      }
      if (data.hasOwnProperty('YResolution')) {
        obj['YResolution'] = ApiClient.convertToType(data['YResolution'], 'Number');
      }
    }
    return obj;
  }

  exports.prototype = Object.create(ExifData.prototype);
  exports.prototype.constructor = exports;

  /**
   * Gets or sets the artist.
   * @member {String} Artist
   */
  exports.prototype['Artist'] = undefined;
  /**
   * Gets or sets the copyright info.
   * @member {String} Copyright
   */
  exports.prototype['Copyright'] = undefined;
  /**
   * Gets or sets the date and time.
   * @member {String} DateTime
   */
  exports.prototype['DateTime'] = undefined;
  /**
   * Gets or sets the image description.
   * @member {String} ImageDescription
   */
  exports.prototype['ImageDescription'] = undefined;
  /**
   * Gets or sets the manufacturer.
   * @member {String} Make
   */
  exports.prototype['Make'] = undefined;
  /**
   * Gets or sets the model.
   * @member {String} Model
   */
  exports.prototype['Model'] = undefined;
  /**
   * Gets or sets the orientation.
   * @member {String} Orientation
   */
  exports.prototype['Orientation'] = undefined;
  /**
   * Gets or sets the primary chromaticities.
   * @member {Array.<Number>} PrimaryChromaticities
   */
  exports.prototype['PrimaryChromaticities'] = undefined;
  /**
   * Gets or sets the reference black and white.
   * @member {Array.<Number>} ReferenceBlackWhite
   */
  exports.prototype['ReferenceBlackWhite'] = undefined;
  /**
   * Gets or sets the resolution unit.
   * @member {String} ResolutionUnit
   */
  exports.prototype['ResolutionUnit'] = undefined;
  /**
   * Gets or sets the software.
   * @member {String} Software
   */
  exports.prototype['Software'] = undefined;
  /**
   * Gets or sets the transfer function.
   * @member {Array.<Number>} TransferFunction
   */
  exports.prototype['TransferFunction'] = undefined;
  /**
   * Gets or sets the X resolution.
   * @member {Number} XResolution
   */
  exports.prototype['XResolution'] = undefined;
  /**
   * Gets or sets the YCbCr coefficients.
   * @member {Array.<Number>} YCbCrCoefficients
   */
  exports.prototype['YCbCrCoefficients'] = undefined;
  /**
   * Gets or sets the YCbCr positioning.
   * @member {String} YCbCrPositioning
   */
  exports.prototype['YCbCrPositioning'] = undefined;
  /**
   * Gets or sets the Y resolution.
   * @member {Number} YResolution
   */
  exports.prototype['YResolution'] = undefined;



  return exports;
}));


