/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AsposeimagingCloudApiReference) {
      root.AsposeimagingCloudApiReference = {};
    }
    root.AsposeimagingCloudApiReference.TiffOptions = factory(root.AsposeimagingCloudApiReference.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The TiffOptions model module.
   * @module model/TiffOptions
   * @version 3.0
   */

  /**
   * Constructs a new <code>TiffOptions</code>.
   * Represents options for TIFF frame.
   * @alias module:model/TiffOptions
   * @class
   * @param isValid {Boolean} Gets or sets a value indicating whether TIFF image has valid data.
   * @param rowsPerStrip {Number} Gets or sets the rows per strip.
   * @param samplesPerPixel {Number} Gets or sets the samples per pixel.
   * @param totalPages {Number} Gets or sets the total pages count.
   * @param xposition {Number} Gets or sets the X position.
   * @param xresolution {Number} Gets or sets the X resolution.
   * @param yposition {Number} Gets or sets the Y position.
   * @param yresolution {Number} Gets or sets the Y resolution.
   * @param imageLength {Number} Gets or sets the image length.
   * @param imageWidth {Number} Gets or sets the image width.
   * @param validTagCount {Number} Gets or sets the valid tag count.
   * @param bitsPerPixel {Number} Gets or sets the bits per pixel.
   */
  var exports = function(isValid, rowsPerStrip, samplesPerPixel, totalPages, xposition, xresolution, yposition, yresolution, imageLength, imageWidth, validTagCount, bitsPerPixel) {
    var _this = this;

    _this['IsValid'] = isValid;























    _this['RowsPerStrip'] = rowsPerStrip;

    _this['SamplesPerPixel'] = samplesPerPixel;








    _this['TotalPages'] = totalPages;
    _this['Xposition'] = xposition;
    _this['Xresolution'] = xresolution;
    _this['Yposition'] = yposition;
    _this['Yresolution'] = yresolution;


    _this['ImageLength'] = imageLength;
    _this['ImageWidth'] = imageWidth;
    _this['ValidTagCount'] = validTagCount;
    _this['BitsPerPixel'] = bitsPerPixel;
  };

  /**
   * Constructs a <code>TiffOptions</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TiffOptions} obj Optional instance to populate.
   * @return {module:model/TiffOptions} The populated <code>TiffOptions</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('IsValid')) {
        obj['IsValid'] = ApiClient.convertToType(data['IsValid'], 'Boolean');
      }
      if (data.hasOwnProperty('Artist')) {
        obj['Artist'] = ApiClient.convertToType(data['Artist'], 'String');
      }
      if (data.hasOwnProperty('ByteOrder')) {
        obj['ByteOrder'] = ApiClient.convertToType(data['ByteOrder'], 'String');
      }
      if (data.hasOwnProperty('BitsPerSample')) {
        obj['BitsPerSample'] = ApiClient.convertToType(data['BitsPerSample'], ['Number']);
      }
      if (data.hasOwnProperty('Compression')) {
        obj['Compression'] = ApiClient.convertToType(data['Compression'], 'String');
      }
      if (data.hasOwnProperty('Copyright')) {
        obj['Copyright'] = ApiClient.convertToType(data['Copyright'], 'String');
      }
      if (data.hasOwnProperty('ColorMap')) {
        obj['ColorMap'] = ApiClient.convertToType(data['ColorMap'], ['Number']);
      }
      if (data.hasOwnProperty('DateTime')) {
        obj['DateTime'] = ApiClient.convertToType(data['DateTime'], 'String');
      }
      if (data.hasOwnProperty('DocumentName')) {
        obj['DocumentName'] = ApiClient.convertToType(data['DocumentName'], 'String');
      }
      if (data.hasOwnProperty('AlphaStorage')) {
        obj['AlphaStorage'] = ApiClient.convertToType(data['AlphaStorage'], 'String');
      }
      if (data.hasOwnProperty('FillOrder')) {
        obj['FillOrder'] = ApiClient.convertToType(data['FillOrder'], 'String');
      }
      if (data.hasOwnProperty('HalfToneHints')) {
        obj['HalfToneHints'] = ApiClient.convertToType(data['HalfToneHints'], ['Number']);
      }
      if (data.hasOwnProperty('ImageDescription')) {
        obj['ImageDescription'] = ApiClient.convertToType(data['ImageDescription'], 'String');
      }
      if (data.hasOwnProperty('InkNames')) {
        obj['InkNames'] = ApiClient.convertToType(data['InkNames'], 'String');
      }
      if (data.hasOwnProperty('ScannerManufacturer')) {
        obj['ScannerManufacturer'] = ApiClient.convertToType(data['ScannerManufacturer'], 'String');
      }
      if (data.hasOwnProperty('MaxSampleValue')) {
        obj['MaxSampleValue'] = ApiClient.convertToType(data['MaxSampleValue'], ['Number']);
      }
      if (data.hasOwnProperty('MinSampleValue')) {
        obj['MinSampleValue'] = ApiClient.convertToType(data['MinSampleValue'], ['Number']);
      }
      if (data.hasOwnProperty('ScannerModel')) {
        obj['ScannerModel'] = ApiClient.convertToType(data['ScannerModel'], 'String');
      }
      if (data.hasOwnProperty('PageName')) {
        obj['PageName'] = ApiClient.convertToType(data['PageName'], 'String');
      }
      if (data.hasOwnProperty('Orientation')) {
        obj['Orientation'] = ApiClient.convertToType(data['Orientation'], 'String');
      }
      if (data.hasOwnProperty('PageNumber')) {
        obj['PageNumber'] = ApiClient.convertToType(data['PageNumber'], ['Number']);
      }
      if (data.hasOwnProperty('Photometric')) {
        obj['Photometric'] = ApiClient.convertToType(data['Photometric'], 'String');
      }
      if (data.hasOwnProperty('PlanarConfiguration')) {
        obj['PlanarConfiguration'] = ApiClient.convertToType(data['PlanarConfiguration'], 'String');
      }
      if (data.hasOwnProperty('ResolutionUnit')) {
        obj['ResolutionUnit'] = ApiClient.convertToType(data['ResolutionUnit'], 'String');
      }
      if (data.hasOwnProperty('RowsPerStrip')) {
        obj['RowsPerStrip'] = ApiClient.convertToType(data['RowsPerStrip'], 'Number');
      }
      if (data.hasOwnProperty('SampleFormat')) {
        obj['SampleFormat'] = ApiClient.convertToType(data['SampleFormat'], ['String']);
      }
      if (data.hasOwnProperty('SamplesPerPixel')) {
        obj['SamplesPerPixel'] = ApiClient.convertToType(data['SamplesPerPixel'], 'Number');
      }
      if (data.hasOwnProperty('SmaxSampleValue')) {
        obj['SmaxSampleValue'] = ApiClient.convertToType(data['SmaxSampleValue'], ['Number']);
      }
      if (data.hasOwnProperty('SminSampleValue')) {
        obj['SminSampleValue'] = ApiClient.convertToType(data['SminSampleValue'], ['Number']);
      }
      if (data.hasOwnProperty('SoftwareType')) {
        obj['SoftwareType'] = ApiClient.convertToType(data['SoftwareType'], 'String');
      }
      if (data.hasOwnProperty('StripByteCounts')) {
        obj['StripByteCounts'] = ApiClient.convertToType(data['StripByteCounts'], ['Number']);
      }
      if (data.hasOwnProperty('StripOffsets')) {
        obj['StripOffsets'] = ApiClient.convertToType(data['StripOffsets'], ['Number']);
      }
      if (data.hasOwnProperty('SubFileType')) {
        obj['SubFileType'] = ApiClient.convertToType(data['SubFileType'], 'String');
      }
      if (data.hasOwnProperty('TargetPrinter')) {
        obj['TargetPrinter'] = ApiClient.convertToType(data['TargetPrinter'], 'String');
      }
      if (data.hasOwnProperty('Threshholding')) {
        obj['Threshholding'] = ApiClient.convertToType(data['Threshholding'], 'String');
      }
      if (data.hasOwnProperty('TotalPages')) {
        obj['TotalPages'] = ApiClient.convertToType(data['TotalPages'], 'Number');
      }
      if (data.hasOwnProperty('Xposition')) {
        obj['Xposition'] = ApiClient.convertToType(data['Xposition'], 'Number');
      }
      if (data.hasOwnProperty('Xresolution')) {
        obj['Xresolution'] = ApiClient.convertToType(data['Xresolution'], 'Number');
      }
      if (data.hasOwnProperty('Yposition')) {
        obj['Yposition'] = ApiClient.convertToType(data['Yposition'], 'Number');
      }
      if (data.hasOwnProperty('Yresolution')) {
        obj['Yresolution'] = ApiClient.convertToType(data['Yresolution'], 'Number');
      }
      if (data.hasOwnProperty('FaxT4Options')) {
        obj['FaxT4Options'] = ApiClient.convertToType(data['FaxT4Options'], 'String');
      }
      if (data.hasOwnProperty('Predictor')) {
        obj['Predictor'] = ApiClient.convertToType(data['Predictor'], 'String');
      }
      if (data.hasOwnProperty('ImageLength')) {
        obj['ImageLength'] = ApiClient.convertToType(data['ImageLength'], 'Number');
      }
      if (data.hasOwnProperty('ImageWidth')) {
        obj['ImageWidth'] = ApiClient.convertToType(data['ImageWidth'], 'Number');
      }
      if (data.hasOwnProperty('ValidTagCount')) {
        obj['ValidTagCount'] = ApiClient.convertToType(data['ValidTagCount'], 'Number');
      }
      if (data.hasOwnProperty('BitsPerPixel')) {
        obj['BitsPerPixel'] = ApiClient.convertToType(data['BitsPerPixel'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Gets or sets a value indicating whether TIFF image has valid data.
   * @member {Boolean} IsValid
   */
  exports.prototype['IsValid'] = undefined;
  /**
   * Gets or sets the artist.
   * @member {String} Artist
   */
  exports.prototype['Artist'] = undefined;
  /**
   * Gets or sets the byte order.
   * @member {String} ByteOrder
   */
  exports.prototype['ByteOrder'] = undefined;
  /**
   * Gets or sets the bits per sample.
   * @member {Array.<Number>} BitsPerSample
   */
  exports.prototype['BitsPerSample'] = undefined;
  /**
   * Gets or sets the compression.
   * @member {String} Compression
   */
  exports.prototype['Compression'] = undefined;
  /**
   * Gets or sets the copyright info.
   * @member {String} Copyright
   */
  exports.prototype['Copyright'] = undefined;
  /**
   * Gets or sets the color map.
   * @member {Array.<Number>} ColorMap
   */
  exports.prototype['ColorMap'] = undefined;
  /**
   * Gets or sets the date and time.
   * @member {String} DateTime
   */
  exports.prototype['DateTime'] = undefined;
  /**
   * Gets or sets the document name.
   * @member {String} DocumentName
   */
  exports.prototype['DocumentName'] = undefined;
  /**
   * Gets or sets the alpha storage.
   * @member {String} AlphaStorage
   */
  exports.prototype['AlphaStorage'] = undefined;
  /**
   * Gets or sets the fill order.
   * @member {String} FillOrder
   */
  exports.prototype['FillOrder'] = undefined;
  /**
   * Gets or sets the half-tone hints.
   * @member {Array.<Number>} HalfToneHints
   */
  exports.prototype['HalfToneHints'] = undefined;
  /**
   * Gets or sets the image description.
   * @member {String} ImageDescription
   */
  exports.prototype['ImageDescription'] = undefined;
  /**
   * Gets or sets the ink names.
   * @member {String} InkNames
   */
  exports.prototype['InkNames'] = undefined;
  /**
   * Gets or sets the scanner manufacturer.
   * @member {String} ScannerManufacturer
   */
  exports.prototype['ScannerManufacturer'] = undefined;
  /**
   * Gets or sets the max sample value.
   * @member {Array.<Number>} MaxSampleValue
   */
  exports.prototype['MaxSampleValue'] = undefined;
  /**
   * Gets or sets the min sample value.
   * @member {Array.<Number>} MinSampleValue
   */
  exports.prototype['MinSampleValue'] = undefined;
  /**
   * Gets or sets the scanner model.
   * @member {String} ScannerModel
   */
  exports.prototype['ScannerModel'] = undefined;
  /**
   * Gets or sets the page name.
   * @member {String} PageName
   */
  exports.prototype['PageName'] = undefined;
  /**
   * Gets or sets the orientation.
   * @member {String} Orientation
   */
  exports.prototype['Orientation'] = undefined;
  /**
   * Gets or sets the page number.
   * @member {Array.<Number>} PageNumber
   */
  exports.prototype['PageNumber'] = undefined;
  /**
   * Gets or sets the photometric interpretation.
   * @member {String} Photometric
   */
  exports.prototype['Photometric'] = undefined;
  /**
   * Gets or sets the planar configuration.
   * @member {String} PlanarConfiguration
   */
  exports.prototype['PlanarConfiguration'] = undefined;
  /**
   * Gets or sets the resolution unit.
   * @member {String} ResolutionUnit
   */
  exports.prototype['ResolutionUnit'] = undefined;
  /**
   * Gets or sets the rows per strip.
   * @member {Number} RowsPerStrip
   */
  exports.prototype['RowsPerStrip'] = undefined;
  /**
   * Gets or sets the sample format.
   * @member {Array.<String>} SampleFormat
   */
  exports.prototype['SampleFormat'] = undefined;
  /**
   * Gets or sets the samples per pixel.
   * @member {Number} SamplesPerPixel
   */
  exports.prototype['SamplesPerPixel'] = undefined;
  /**
   * Gets or sets the Smax sample value.
   * @member {Array.<Number>} SmaxSampleValue
   */
  exports.prototype['SmaxSampleValue'] = undefined;
  /**
   * Gets or sets the Smin sample value.
   * @member {Array.<Number>} SminSampleValue
   */
  exports.prototype['SminSampleValue'] = undefined;
  /**
   * Gets or sets the software type.
   * @member {String} SoftwareType
   */
  exports.prototype['SoftwareType'] = undefined;
  /**
   * Gets or sets the strip byte counts.
   * @member {Array.<Number>} StripByteCounts
   */
  exports.prototype['StripByteCounts'] = undefined;
  /**
   * Gets or sets the strip offsets.
   * @member {Array.<Number>} StripOffsets
   */
  exports.prototype['StripOffsets'] = undefined;
  /**
   * Gets or sets the subfile type.
   * @member {String} SubFileType
   */
  exports.prototype['SubFileType'] = undefined;
  /**
   * Gets or sets the target printer.
   * @member {String} TargetPrinter
   */
  exports.prototype['TargetPrinter'] = undefined;
  /**
   * Gets or sets the threshholding.
   * @member {String} Threshholding
   */
  exports.prototype['Threshholding'] = undefined;
  /**
   * Gets or sets the total pages count.
   * @member {Number} TotalPages
   */
  exports.prototype['TotalPages'] = undefined;
  /**
   * Gets or sets the X position.
   * @member {Number} Xposition
   */
  exports.prototype['Xposition'] = undefined;
  /**
   * Gets or sets the X resolution.
   * @member {Number} Xresolution
   */
  exports.prototype['Xresolution'] = undefined;
  /**
   * Gets or sets the Y position.
   * @member {Number} Yposition
   */
  exports.prototype['Yposition'] = undefined;
  /**
   * Gets or sets the Y resolution.
   * @member {Number} Yresolution
   */
  exports.prototype['Yresolution'] = undefined;
  /**
   * Gets or sets the FaxT4 Options.
   * @member {String} FaxT4Options
   */
  exports.prototype['FaxT4Options'] = undefined;
  /**
   * Gets or sets the predictor (a mathematical operator that is applied to the image data before an encoding scheme is applied).
   * @member {String} Predictor
   */
  exports.prototype['Predictor'] = undefined;
  /**
   * Gets or sets the image length.
   * @member {Number} ImageLength
   */
  exports.prototype['ImageLength'] = undefined;
  /**
   * Gets or sets the image width.
   * @member {Number} ImageWidth
   */
  exports.prototype['ImageWidth'] = undefined;
  /**
   * Gets or sets the valid tag count.
   * @member {Number} ValidTagCount
   */
  exports.prototype['ValidTagCount'] = undefined;
  /**
   * Gets or sets the bits per pixel.
   * @member {Number} BitsPerPixel
   */
  exports.prototype['BitsPerPixel'] = undefined;



  return exports;
}));


