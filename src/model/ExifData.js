/**
 * Aspose.Imaging Cloud API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.5
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AsposeimagingCloudApiReference) {
      root.AsposeimagingCloudApiReference = {};
    }
    root.AsposeimagingCloudApiReference.ExifData = factory(root.AsposeimagingCloudApiReference.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ExifData model module.
   * @module model/ExifData
   * @version 3.0
   */

  /**
   * Constructs a new <code>ExifData</code>.
   * Represents common EXIF data section.
   * @alias module:model/ExifData
   * @class
   * @param apertureValue {Number} Gets or sets the aperture.
   * @param brightnessValue {Number} Gets or sets the brightness.
   * @param compressedBitsPerPixel {Number} Gets or sets the compressed bits per pixel.
   * @param digitalZoomRatio {Number} Gets or sets the digital zoom ratio.
   * @param exposureBiasValue {Number} Gets or sets the exposure bias.
   * @param exposureIndex {Number} Gets or sets the exposure index.
   * @param exposureTime {Number} Gets or sets the exposure time.
   * @param fNumber {Number} Gets or sets the focal number.
   * @param flashEnergy {Number} Gets or sets the flash energy.
   * @param focalLength {Number} Gets or sets the focal length.
   * @param focalLengthIn35MmFilm {Number} Gets or sets the focal length in 35mm film.
   * @param focalPlaneXResolution {Number} Gets or sets the focal plane X resolution.
   * @param focalPlaneYResolution {Number} Gets or sets the focal plane Y resolution.
   * @param gPSAltitude {Number} Gets or sets the GPS altitude.
   * @param GPSDOP {Number} Gets or sets the GPS DOP (data degree of precision).
   * @param gPSDestBearing {Number} Gets or sets the GPS bearing of the destination.
   * @param gPSDestDistance {Number} Gets or sets the GPS destination distance.
   * @param gPSDifferential {Number} Gets or sets the GPS differential.
   * @param gPSImgDirection {Number} Gets or sets the GPS image direction.
   * @param gPSSpeed {Number} Gets or sets the GPS speed.
   * @param gamma {Number} Gets or sets the gamma.
   * @param iSOSpeed {Number} Gets or sets the ISO speed.
   * @param iSOSpeedLatitudeYYY {Number} Gets or sets the ISO speed latitude YYY value.
   * @param iSOSpeedLatitudeZZZ {Number} Gets or sets the ISO speed latitude ZZZ value.
   * @param photographicSensitivity {Number} Gets or sets the photographic sensitivity.
   * @param maxApertureValue {Number} Gets or sets the max aperture.
   * @param pixelXDimension {Number} Gets or sets the pixel X dimension.
   * @param pixelYDimension {Number} Gets or sets the pixel Y dimension.
   * @param recommendedExposureIndex {Number} Gets or sets the recommended exposure index.
   * @param sceneType {Number} Gets or sets the scene type.
   * @param sensitivityType {Number} Gets or sets the sensitivity type.
   * @param sharpness {Number} Gets or sets the sharpness.
   * @param shutterSpeedValue {Number} Gets or sets the shutter speed.
   * @param standardOutputSensitivity {Number} Gets or sets the standard output sensitivity.
   * @param subjectDistance {Number} Gets or sets the subject distance.
   */
  var exports = function(apertureValue, brightnessValue, compressedBitsPerPixel, digitalZoomRatio, exposureBiasValue, exposureIndex, exposureTime, fNumber, flashEnergy, focalLength, focalLengthIn35MmFilm, focalPlaneXResolution, focalPlaneYResolution, gPSAltitude, GPSDOP, gPSDestBearing, gPSDestDistance, gPSDifferential, gPSImgDirection, gPSSpeed, gamma, iSOSpeed, iSOSpeedLatitudeYYY, iSOSpeedLatitudeZZZ, photographicSensitivity, maxApertureValue, pixelXDimension, pixelYDimension, recommendedExposureIndex, sceneType, sensitivityType, sharpness, shutterSpeedValue, standardOutputSensitivity, subjectDistance) {
    var _this = this;

    _this['ApertureValue'] = apertureValue;

    _this['BrightnessValue'] = brightnessValue;




    _this['CompressedBitsPerPixel'] = compressedBitsPerPixel;





    _this['DigitalZoomRatio'] = digitalZoomRatio;

    _this['ExposureBiasValue'] = exposureBiasValue;
    _this['ExposureIndex'] = exposureIndex;


    _this['ExposureTime'] = exposureTime;
    _this['FNumber'] = fNumber;


    _this['FlashEnergy'] = flashEnergy;

    _this['FocalLength'] = focalLength;
    _this['FocalLengthIn35MmFilm'] = focalLengthIn35MmFilm;

    _this['FocalPlaneXResolution'] = focalPlaneXResolution;
    _this['FocalPlaneYResolution'] = focalPlaneYResolution;
    _this['GPSAltitude'] = gPSAltitude;


    _this['GPSDOP'] = GPSDOP;
    _this['GPSDestBearing'] = gPSDestBearing;

    _this['GPSDestDistance'] = gPSDestDistance;





    _this['GPSDifferential'] = gPSDifferential;
    _this['GPSImgDirection'] = gPSImgDirection;










    _this['GPSSpeed'] = gPSSpeed;







    _this['Gamma'] = gamma;
    _this['ISOSpeed'] = iSOSpeed;
    _this['ISOSpeedLatitudeYYY'] = iSOSpeedLatitudeYYY;
    _this['ISOSpeedLatitudeZZZ'] = iSOSpeedLatitudeZZZ;
    _this['PhotographicSensitivity'] = photographicSensitivity;







    _this['MaxApertureValue'] = maxApertureValue;


    _this['PixelXDimension'] = pixelXDimension;
    _this['PixelYDimension'] = pixelYDimension;
    _this['RecommendedExposureIndex'] = recommendedExposureIndex;



    _this['SceneType'] = sceneType;

    _this['SensitivityType'] = sensitivityType;
    _this['Sharpness'] = sharpness;
    _this['ShutterSpeedValue'] = shutterSpeedValue;


    _this['StandardOutputSensitivity'] = standardOutputSensitivity;

    _this['SubjectDistance'] = subjectDistance;








  };

  /**
   * Constructs a <code>ExifData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ExifData} obj Optional instance to populate.
   * @return {module:model/ExifData} The populated <code>ExifData</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ApertureValue')) {
        obj['ApertureValue'] = ApiClient.convertToType(data['ApertureValue'], 'Number');
      }
      if (data.hasOwnProperty('BodySerialNumber')) {
        obj['BodySerialNumber'] = ApiClient.convertToType(data['BodySerialNumber'], 'String');
      }
      if (data.hasOwnProperty('BrightnessValue')) {
        obj['BrightnessValue'] = ApiClient.convertToType(data['BrightnessValue'], 'Number');
      }
      if (data.hasOwnProperty('CFAPattern')) {
        obj['CFAPattern'] = ApiClient.convertToType(data['CFAPattern'], 'Blob');
      }
      if (data.hasOwnProperty('CameraOwnerName')) {
        obj['CameraOwnerName'] = ApiClient.convertToType(data['CameraOwnerName'], 'String');
      }
      if (data.hasOwnProperty('ColorSpace')) {
        obj['ColorSpace'] = ApiClient.convertToType(data['ColorSpace'], 'String');
      }
      if (data.hasOwnProperty('ComponentsConfiguration')) {
        obj['ComponentsConfiguration'] = ApiClient.convertToType(data['ComponentsConfiguration'], 'Blob');
      }
      if (data.hasOwnProperty('CompressedBitsPerPixel')) {
        obj['CompressedBitsPerPixel'] = ApiClient.convertToType(data['CompressedBitsPerPixel'], 'Number');
      }
      if (data.hasOwnProperty('Contrast')) {
        obj['Contrast'] = ApiClient.convertToType(data['Contrast'], 'String');
      }
      if (data.hasOwnProperty('CustomRendered')) {
        obj['CustomRendered'] = ApiClient.convertToType(data['CustomRendered'], 'String');
      }
      if (data.hasOwnProperty('DateTimeDigitized')) {
        obj['DateTimeDigitized'] = ApiClient.convertToType(data['DateTimeDigitized'], 'String');
      }
      if (data.hasOwnProperty('DateTimeOriginal')) {
        obj['DateTimeOriginal'] = ApiClient.convertToType(data['DateTimeOriginal'], 'String');
      }
      if (data.hasOwnProperty('DeviceSettingDescription')) {
        obj['DeviceSettingDescription'] = ApiClient.convertToType(data['DeviceSettingDescription'], 'Blob');
      }
      if (data.hasOwnProperty('DigitalZoomRatio')) {
        obj['DigitalZoomRatio'] = ApiClient.convertToType(data['DigitalZoomRatio'], 'Number');
      }
      if (data.hasOwnProperty('ExifVersion')) {
        obj['ExifVersion'] = ApiClient.convertToType(data['ExifVersion'], 'Blob');
      }
      if (data.hasOwnProperty('ExposureBiasValue')) {
        obj['ExposureBiasValue'] = ApiClient.convertToType(data['ExposureBiasValue'], 'Number');
      }
      if (data.hasOwnProperty('ExposureIndex')) {
        obj['ExposureIndex'] = ApiClient.convertToType(data['ExposureIndex'], 'Number');
      }
      if (data.hasOwnProperty('ExposureMode')) {
        obj['ExposureMode'] = ApiClient.convertToType(data['ExposureMode'], 'String');
      }
      if (data.hasOwnProperty('ExposureProgram')) {
        obj['ExposureProgram'] = ApiClient.convertToType(data['ExposureProgram'], 'String');
      }
      if (data.hasOwnProperty('ExposureTime')) {
        obj['ExposureTime'] = ApiClient.convertToType(data['ExposureTime'], 'Number');
      }
      if (data.hasOwnProperty('FNumber')) {
        obj['FNumber'] = ApiClient.convertToType(data['FNumber'], 'Number');
      }
      if (data.hasOwnProperty('FileSource')) {
        obj['FileSource'] = ApiClient.convertToType(data['FileSource'], 'String');
      }
      if (data.hasOwnProperty('Flash')) {
        obj['Flash'] = ApiClient.convertToType(data['Flash'], 'String');
      }
      if (data.hasOwnProperty('FlashEnergy')) {
        obj['FlashEnergy'] = ApiClient.convertToType(data['FlashEnergy'], 'Number');
      }
      if (data.hasOwnProperty('FlashpixVersion')) {
        obj['FlashpixVersion'] = ApiClient.convertToType(data['FlashpixVersion'], 'Blob');
      }
      if (data.hasOwnProperty('FocalLength')) {
        obj['FocalLength'] = ApiClient.convertToType(data['FocalLength'], 'Number');
      }
      if (data.hasOwnProperty('FocalLengthIn35MmFilm')) {
        obj['FocalLengthIn35MmFilm'] = ApiClient.convertToType(data['FocalLengthIn35MmFilm'], 'Number');
      }
      if (data.hasOwnProperty('FocalPlaneResolutionUnit')) {
        obj['FocalPlaneResolutionUnit'] = ApiClient.convertToType(data['FocalPlaneResolutionUnit'], 'String');
      }
      if (data.hasOwnProperty('FocalPlaneXResolution')) {
        obj['FocalPlaneXResolution'] = ApiClient.convertToType(data['FocalPlaneXResolution'], 'Number');
      }
      if (data.hasOwnProperty('FocalPlaneYResolution')) {
        obj['FocalPlaneYResolution'] = ApiClient.convertToType(data['FocalPlaneYResolution'], 'Number');
      }
      if (data.hasOwnProperty('GPSAltitude')) {
        obj['GPSAltitude'] = ApiClient.convertToType(data['GPSAltitude'], 'Number');
      }
      if (data.hasOwnProperty('GPSAltitudeRef')) {
        obj['GPSAltitudeRef'] = ApiClient.convertToType(data['GPSAltitudeRef'], 'String');
      }
      if (data.hasOwnProperty('GPSAreaInformation')) {
        obj['GPSAreaInformation'] = ApiClient.convertToType(data['GPSAreaInformation'], 'Blob');
      }
      if (data.hasOwnProperty('GPSDOP')) {
        obj['GPSDOP'] = ApiClient.convertToType(data['GPSDOP'], 'Number');
      }
      if (data.hasOwnProperty('GPSDestBearing')) {
        obj['GPSDestBearing'] = ApiClient.convertToType(data['GPSDestBearing'], 'Number');
      }
      if (data.hasOwnProperty('GPSDestBearingRef')) {
        obj['GPSDestBearingRef'] = ApiClient.convertToType(data['GPSDestBearingRef'], 'String');
      }
      if (data.hasOwnProperty('GPSDestDistance')) {
        obj['GPSDestDistance'] = ApiClient.convertToType(data['GPSDestDistance'], 'Number');
      }
      if (data.hasOwnProperty('GPSDestDistanceRef')) {
        obj['GPSDestDistanceRef'] = ApiClient.convertToType(data['GPSDestDistanceRef'], 'String');
      }
      if (data.hasOwnProperty('GPSDestLatitude')) {
        obj['GPSDestLatitude'] = ApiClient.convertToType(data['GPSDestLatitude'], ['Number']);
      }
      if (data.hasOwnProperty('GPSDestLatitudeRef')) {
        obj['GPSDestLatitudeRef'] = ApiClient.convertToType(data['GPSDestLatitudeRef'], 'String');
      }
      if (data.hasOwnProperty('GPSDestLongitude')) {
        obj['GPSDestLongitude'] = ApiClient.convertToType(data['GPSDestLongitude'], ['Number']);
      }
      if (data.hasOwnProperty('GPSDestLongitudeRef')) {
        obj['GPSDestLongitudeRef'] = ApiClient.convertToType(data['GPSDestLongitudeRef'], 'String');
      }
      if (data.hasOwnProperty('GPSDifferential')) {
        obj['GPSDifferential'] = ApiClient.convertToType(data['GPSDifferential'], 'Number');
      }
      if (data.hasOwnProperty('GPSImgDirection')) {
        obj['GPSImgDirection'] = ApiClient.convertToType(data['GPSImgDirection'], 'Number');
      }
      if (data.hasOwnProperty('GPSImgDirectionRef')) {
        obj['GPSImgDirectionRef'] = ApiClient.convertToType(data['GPSImgDirectionRef'], 'String');
      }
      if (data.hasOwnProperty('GPSDateStamp')) {
        obj['GPSDateStamp'] = ApiClient.convertToType(data['GPSDateStamp'], 'String');
      }
      if (data.hasOwnProperty('GPSLatitude')) {
        obj['GPSLatitude'] = ApiClient.convertToType(data['GPSLatitude'], ['Number']);
      }
      if (data.hasOwnProperty('GPSLatitudeRef')) {
        obj['GPSLatitudeRef'] = ApiClient.convertToType(data['GPSLatitudeRef'], 'String');
      }
      if (data.hasOwnProperty('GPSLongitude')) {
        obj['GPSLongitude'] = ApiClient.convertToType(data['GPSLongitude'], ['Number']);
      }
      if (data.hasOwnProperty('GPSLongitudeRef')) {
        obj['GPSLongitudeRef'] = ApiClient.convertToType(data['GPSLongitudeRef'], 'String');
      }
      if (data.hasOwnProperty('GPSMapDatum')) {
        obj['GPSMapDatum'] = ApiClient.convertToType(data['GPSMapDatum'], 'String');
      }
      if (data.hasOwnProperty('GPSMeasureMode')) {
        obj['GPSMeasureMode'] = ApiClient.convertToType(data['GPSMeasureMode'], 'String');
      }
      if (data.hasOwnProperty('GPSProcessingMethod')) {
        obj['GPSProcessingMethod'] = ApiClient.convertToType(data['GPSProcessingMethod'], 'Blob');
      }
      if (data.hasOwnProperty('GPSSatellites')) {
        obj['GPSSatellites'] = ApiClient.convertToType(data['GPSSatellites'], 'String');
      }
      if (data.hasOwnProperty('GPSSpeed')) {
        obj['GPSSpeed'] = ApiClient.convertToType(data['GPSSpeed'], 'Number');
      }
      if (data.hasOwnProperty('GPSSpeedRef')) {
        obj['GPSSpeedRef'] = ApiClient.convertToType(data['GPSSpeedRef'], 'String');
      }
      if (data.hasOwnProperty('GPSStatus')) {
        obj['GPSStatus'] = ApiClient.convertToType(data['GPSStatus'], 'String');
      }
      if (data.hasOwnProperty('GPSTimestamp')) {
        obj['GPSTimestamp'] = ApiClient.convertToType(data['GPSTimestamp'], ['Number']);
      }
      if (data.hasOwnProperty('GPSTrack')) {
        obj['GPSTrack'] = ApiClient.convertToType(data['GPSTrack'], 'String');
      }
      if (data.hasOwnProperty('GPSTrackRef')) {
        obj['GPSTrackRef'] = ApiClient.convertToType(data['GPSTrackRef'], 'String');
      }
      if (data.hasOwnProperty('GPSVersionID')) {
        obj['GPSVersionID'] = ApiClient.convertToType(data['GPSVersionID'], 'Blob');
      }
      if (data.hasOwnProperty('GainControl')) {
        obj['GainControl'] = ApiClient.convertToType(data['GainControl'], 'String');
      }
      if (data.hasOwnProperty('Gamma')) {
        obj['Gamma'] = ApiClient.convertToType(data['Gamma'], 'Number');
      }
      if (data.hasOwnProperty('ISOSpeed')) {
        obj['ISOSpeed'] = ApiClient.convertToType(data['ISOSpeed'], 'Number');
      }
      if (data.hasOwnProperty('ISOSpeedLatitudeYYY')) {
        obj['ISOSpeedLatitudeYYY'] = ApiClient.convertToType(data['ISOSpeedLatitudeYYY'], 'Number');
      }
      if (data.hasOwnProperty('ISOSpeedLatitudeZZZ')) {
        obj['ISOSpeedLatitudeZZZ'] = ApiClient.convertToType(data['ISOSpeedLatitudeZZZ'], 'Number');
      }
      if (data.hasOwnProperty('PhotographicSensitivity')) {
        obj['PhotographicSensitivity'] = ApiClient.convertToType(data['PhotographicSensitivity'], 'Number');
      }
      if (data.hasOwnProperty('ImageUniqueID')) {
        obj['ImageUniqueID'] = ApiClient.convertToType(data['ImageUniqueID'], 'String');
      }
      if (data.hasOwnProperty('LensMake')) {
        obj['LensMake'] = ApiClient.convertToType(data['LensMake'], 'String');
      }
      if (data.hasOwnProperty('LensModel')) {
        obj['LensModel'] = ApiClient.convertToType(data['LensModel'], 'String');
      }
      if (data.hasOwnProperty('LensSerialNumber')) {
        obj['LensSerialNumber'] = ApiClient.convertToType(data['LensSerialNumber'], 'String');
      }
      if (data.hasOwnProperty('LensSpecification')) {
        obj['LensSpecification'] = ApiClient.convertToType(data['LensSpecification'], ['Number']);
      }
      if (data.hasOwnProperty('LightSource')) {
        obj['LightSource'] = ApiClient.convertToType(data['LightSource'], 'String');
      }
      if (data.hasOwnProperty('MakerNoteRawData')) {
        obj['MakerNoteRawData'] = ApiClient.convertToType(data['MakerNoteRawData'], 'Blob');
      }
      if (data.hasOwnProperty('MaxApertureValue')) {
        obj['MaxApertureValue'] = ApiClient.convertToType(data['MaxApertureValue'], 'Number');
      }
      if (data.hasOwnProperty('MeteringMode')) {
        obj['MeteringMode'] = ApiClient.convertToType(data['MeteringMode'], 'String');
      }
      if (data.hasOwnProperty('OECF')) {
        obj['OECF'] = ApiClient.convertToType(data['OECF'], 'Blob');
      }
      if (data.hasOwnProperty('PixelXDimension')) {
        obj['PixelXDimension'] = ApiClient.convertToType(data['PixelXDimension'], 'Number');
      }
      if (data.hasOwnProperty('PixelYDimension')) {
        obj['PixelYDimension'] = ApiClient.convertToType(data['PixelYDimension'], 'Number');
      }
      if (data.hasOwnProperty('RecommendedExposureIndex')) {
        obj['RecommendedExposureIndex'] = ApiClient.convertToType(data['RecommendedExposureIndex'], 'Number');
      }
      if (data.hasOwnProperty('RelatedSoundFile')) {
        obj['RelatedSoundFile'] = ApiClient.convertToType(data['RelatedSoundFile'], 'String');
      }
      if (data.hasOwnProperty('Saturation')) {
        obj['Saturation'] = ApiClient.convertToType(data['Saturation'], 'String');
      }
      if (data.hasOwnProperty('SceneCaptureType')) {
        obj['SceneCaptureType'] = ApiClient.convertToType(data['SceneCaptureType'], 'String');
      }
      if (data.hasOwnProperty('SceneType')) {
        obj['SceneType'] = ApiClient.convertToType(data['SceneType'], 'Number');
      }
      if (data.hasOwnProperty('SensingMethod')) {
        obj['SensingMethod'] = ApiClient.convertToType(data['SensingMethod'], 'String');
      }
      if (data.hasOwnProperty('SensitivityType')) {
        obj['SensitivityType'] = ApiClient.convertToType(data['SensitivityType'], 'Number');
      }
      if (data.hasOwnProperty('Sharpness')) {
        obj['Sharpness'] = ApiClient.convertToType(data['Sharpness'], 'Number');
      }
      if (data.hasOwnProperty('ShutterSpeedValue')) {
        obj['ShutterSpeedValue'] = ApiClient.convertToType(data['ShutterSpeedValue'], 'Number');
      }
      if (data.hasOwnProperty('SpatialFrequencyResponse')) {
        obj['SpatialFrequencyResponse'] = ApiClient.convertToType(data['SpatialFrequencyResponse'], 'Blob');
      }
      if (data.hasOwnProperty('SpectralSensitivity')) {
        obj['SpectralSensitivity'] = ApiClient.convertToType(data['SpectralSensitivity'], 'String');
      }
      if (data.hasOwnProperty('StandardOutputSensitivity')) {
        obj['StandardOutputSensitivity'] = ApiClient.convertToType(data['StandardOutputSensitivity'], 'Number');
      }
      if (data.hasOwnProperty('SubjectArea')) {
        obj['SubjectArea'] = ApiClient.convertToType(data['SubjectArea'], ['Number']);
      }
      if (data.hasOwnProperty('SubjectDistance')) {
        obj['SubjectDistance'] = ApiClient.convertToType(data['SubjectDistance'], 'Number');
      }
      if (data.hasOwnProperty('SubjectDistanceRange')) {
        obj['SubjectDistanceRange'] = ApiClient.convertToType(data['SubjectDistanceRange'], 'String');
      }
      if (data.hasOwnProperty('SubjectLocation')) {
        obj['SubjectLocation'] = ApiClient.convertToType(data['SubjectLocation'], ['Number']);
      }
      if (data.hasOwnProperty('SubsecTime')) {
        obj['SubsecTime'] = ApiClient.convertToType(data['SubsecTime'], 'String');
      }
      if (data.hasOwnProperty('SubsecTimeDigitized')) {
        obj['SubsecTimeDigitized'] = ApiClient.convertToType(data['SubsecTimeDigitized'], 'String');
      }
      if (data.hasOwnProperty('SubsecTimeOriginal')) {
        obj['SubsecTimeOriginal'] = ApiClient.convertToType(data['SubsecTimeOriginal'], 'String');
      }
      if (data.hasOwnProperty('UserComment')) {
        obj['UserComment'] = ApiClient.convertToType(data['UserComment'], 'String');
      }
      if (data.hasOwnProperty('WhiteBalance')) {
        obj['WhiteBalance'] = ApiClient.convertToType(data['WhiteBalance'], 'String');
      }
      if (data.hasOwnProperty('WhitePoint')) {
        obj['WhitePoint'] = ApiClient.convertToType(data['WhitePoint'], ['Number']);
      }
    }
    return obj;
  }

  /**
   * Gets or sets the aperture.
   * @member {Number} ApertureValue
   */
  exports.prototype['ApertureValue'] = undefined;
  /**
   * Gets or sets the body serial number.
   * @member {String} BodySerialNumber
   */
  exports.prototype['BodySerialNumber'] = undefined;
  /**
   * Gets or sets the brightness.
   * @member {Number} BrightnessValue
   */
  exports.prototype['BrightnessValue'] = undefined;
  /**
   * Gets or sets the CFA pattern.
   * @member {Blob} CFAPattern
   */
  exports.prototype['CFAPattern'] = undefined;
  /**
   * Gets or sets the camera owner name.
   * @member {String} CameraOwnerName
   */
  exports.prototype['CameraOwnerName'] = undefined;
  /**
   * Gets or sets the color space.
   * @member {String} ColorSpace
   */
  exports.prototype['ColorSpace'] = undefined;
  /**
   * Gets or sets the components configuration.
   * @member {Blob} ComponentsConfiguration
   */
  exports.prototype['ComponentsConfiguration'] = undefined;
  /**
   * Gets or sets the compressed bits per pixel.
   * @member {Number} CompressedBitsPerPixel
   */
  exports.prototype['CompressedBitsPerPixel'] = undefined;
  /**
   * Gets or sets the contrast.
   * @member {String} Contrast
   */
  exports.prototype['Contrast'] = undefined;
  /**
   * Gets or sets the value indincating if custom rendering is performed.
   * @member {String} CustomRendered
   */
  exports.prototype['CustomRendered'] = undefined;
  /**
   * Gets or sets date and time when image was digitized.
   * @member {String} DateTimeDigitized
   */
  exports.prototype['DateTimeDigitized'] = undefined;
  /**
   * Gets or sets date and time of the original image.
   * @member {String} DateTimeOriginal
   */
  exports.prototype['DateTimeOriginal'] = undefined;
  /**
   * Gets or sets the device setting description.
   * @member {Blob} DeviceSettingDescription
   */
  exports.prototype['DeviceSettingDescription'] = undefined;
  /**
   * Gets or sets the digital zoom ratio.
   * @member {Number} DigitalZoomRatio
   */
  exports.prototype['DigitalZoomRatio'] = undefined;
  /**
   * Gets or sets EXIF version.
   * @member {Blob} ExifVersion
   */
  exports.prototype['ExifVersion'] = undefined;
  /**
   * Gets or sets the exposure bias.
   * @member {Number} ExposureBiasValue
   */
  exports.prototype['ExposureBiasValue'] = undefined;
  /**
   * Gets or sets the exposure index.
   * @member {Number} ExposureIndex
   */
  exports.prototype['ExposureIndex'] = undefined;
  /**
   * Gets or sets the exposure mode.
   * @member {String} ExposureMode
   */
  exports.prototype['ExposureMode'] = undefined;
  /**
   * Gets or sets the exposure program.
   * @member {String} ExposureProgram
   */
  exports.prototype['ExposureProgram'] = undefined;
  /**
   * Gets or sets the exposure time.
   * @member {Number} ExposureTime
   */
  exports.prototype['ExposureTime'] = undefined;
  /**
   * Gets or sets the focal number.
   * @member {Number} FNumber
   */
  exports.prototype['FNumber'] = undefined;
  /**
   * Gets or sets the file source.
   * @member {String} FileSource
   */
  exports.prototype['FileSource'] = undefined;
  /**
   * Gets or sets the flash.
   * @member {String} Flash
   */
  exports.prototype['Flash'] = undefined;
  /**
   * Gets or sets the flash energy.
   * @member {Number} FlashEnergy
   */
  exports.prototype['FlashEnergy'] = undefined;
  /**
   * Gets or sets the Flashpix version.
   * @member {Blob} FlashpixVersion
   */
  exports.prototype['FlashpixVersion'] = undefined;
  /**
   * Gets or sets the focal length.
   * @member {Number} FocalLength
   */
  exports.prototype['FocalLength'] = undefined;
  /**
   * Gets or sets the focal length in 35mm film.
   * @member {Number} FocalLengthIn35MmFilm
   */
  exports.prototype['FocalLengthIn35MmFilm'] = undefined;
  /**
   * Gets or sets the focal plane resolution unit.
   * @member {String} FocalPlaneResolutionUnit
   */
  exports.prototype['FocalPlaneResolutionUnit'] = undefined;
  /**
   * Gets or sets the focal plane X resolution.
   * @member {Number} FocalPlaneXResolution
   */
  exports.prototype['FocalPlaneXResolution'] = undefined;
  /**
   * Gets or sets the focal plane Y resolution.
   * @member {Number} FocalPlaneYResolution
   */
  exports.prototype['FocalPlaneYResolution'] = undefined;
  /**
   * Gets or sets the GPS altitude.
   * @member {Number} GPSAltitude
   */
  exports.prototype['GPSAltitude'] = undefined;
  /**
   * Gets or sets the GPS altitude reference (if it's above or below sea level).
   * @member {String} GPSAltitudeRef
   */
  exports.prototype['GPSAltitudeRef'] = undefined;
  /**
   * Gets or sets the GPS area information.
   * @member {Blob} GPSAreaInformation
   */
  exports.prototype['GPSAreaInformation'] = undefined;
  /**
   * Gets or sets the GPS DOP (data degree of precision).
   * @member {Number} GPSDOP
   */
  exports.prototype['GPSDOP'] = undefined;
  /**
   * Gets or sets the GPS bearing of the destination.
   * @member {Number} GPSDestBearing
   */
  exports.prototype['GPSDestBearing'] = undefined;
  /**
   * Gets or sets the GPS reference unit for bearing of the destination.
   * @member {String} GPSDestBearingRef
   */
  exports.prototype['GPSDestBearingRef'] = undefined;
  /**
   * Gets or sets the GPS destination distance.
   * @member {Number} GPSDestDistance
   */
  exports.prototype['GPSDestDistance'] = undefined;
  /**
   * Gets or sets the GPS reference unit for destination distance.
   * @member {String} GPSDestDistanceRef
   */
  exports.prototype['GPSDestDistanceRef'] = undefined;
  /**
   * Gets or sets the GPS destination latitude.
   * @member {Array.<Number>} GPSDestLatitude
   */
  exports.prototype['GPSDestLatitude'] = undefined;
  /**
   * Gets or sets the GPS reference destination latitude (north or south).
   * @member {String} GPSDestLatitudeRef
   */
  exports.prototype['GPSDestLatitudeRef'] = undefined;
  /**
   * Gets or sets the GPS destination longtitude.
   * @member {Array.<Number>} GPSDestLongitude
   */
  exports.prototype['GPSDestLongitude'] = undefined;
  /**
   * Gets or sets the GPS reference destination longtitude (east or west).
   * @member {String} GPSDestLongitudeRef
   */
  exports.prototype['GPSDestLongitudeRef'] = undefined;
  /**
   * Gets or sets the GPS differential.
   * @member {Number} GPSDifferential
   */
  exports.prototype['GPSDifferential'] = undefined;
  /**
   * Gets or sets the GPS image direction.
   * @member {Number} GPSImgDirection
   */
  exports.prototype['GPSImgDirection'] = undefined;
  /**
   * Gets or sets the GPS reference image direction.
   * @member {String} GPSImgDirectionRef
   */
  exports.prototype['GPSImgDirectionRef'] = undefined;
  /**
   * Gets or sets the GPS date stamp.
   * @member {String} GPSDateStamp
   */
  exports.prototype['GPSDateStamp'] = undefined;
  /**
   * Gets or sets the GPS latitude.
   * @member {Array.<Number>} GPSLatitude
   */
  exports.prototype['GPSLatitude'] = undefined;
  /**
   * Gets or sets the GPS latitude reference (north or south).
   * @member {String} GPSLatitudeRef
   */
  exports.prototype['GPSLatitudeRef'] = undefined;
  /**
   * Gets or sets the GPS longitude.
   * @member {Array.<Number>} GPSLongitude
   */
  exports.prototype['GPSLongitude'] = undefined;
  /**
   * Gets or sets the GPS longitude reference (east or west).
   * @member {String} GPSLongitudeRef
   */
  exports.prototype['GPSLongitudeRef'] = undefined;
  /**
   * Gets or sets the geodetic survey data used by the GPS receiver.
   * @member {String} GPSMapDatum
   */
  exports.prototype['GPSMapDatum'] = undefined;
  /**
   * Gets or sets the GPS measure mode.
   * @member {String} GPSMeasureMode
   */
  exports.prototype['GPSMeasureMode'] = undefined;
  /**
   * Gets or setsthe GPS processing method.
   * @member {Blob} GPSProcessingMethod
   */
  exports.prototype['GPSProcessingMethod'] = undefined;
  /**
   * Gets or sets the GPS satellites info.
   * @member {String} GPSSatellites
   */
  exports.prototype['GPSSatellites'] = undefined;
  /**
   * Gets or sets the GPS speed.
   * @member {Number} GPSSpeed
   */
  exports.prototype['GPSSpeed'] = undefined;
  /**
   * Gets or sets the GPS speed reference unit.
   * @member {String} GPSSpeedRef
   */
  exports.prototype['GPSSpeedRef'] = undefined;
  /**
   * Gets or sets the GPS status.
   * @member {String} GPSStatus
   */
  exports.prototype['GPSStatus'] = undefined;
  /**
   * Gets or sets the GPS times tamp.
   * @member {Array.<Number>} GPSTimestamp
   */
  exports.prototype['GPSTimestamp'] = undefined;
  /**
   * Gets or sets the GPS track.
   * @member {String} GPSTrack
   */
  exports.prototype['GPSTrack'] = undefined;
  /**
   * Gets or sets the GPS track reference.
   * @member {String} GPSTrackRef
   */
  exports.prototype['GPSTrackRef'] = undefined;
  /**
   * Gets or sets the GPS version ID.
   * @member {Blob} GPSVersionID
   */
  exports.prototype['GPSVersionID'] = undefined;
  /**
   * Gets or sets the gain control.
   * @member {String} GainControl
   */
  exports.prototype['GainControl'] = undefined;
  /**
   * Gets or sets the gamma.
   * @member {Number} Gamma
   */
  exports.prototype['Gamma'] = undefined;
  /**
   * Gets or sets the ISO speed.
   * @member {Number} ISOSpeed
   */
  exports.prototype['ISOSpeed'] = undefined;
  /**
   * Gets or sets the ISO speed latitude YYY value.
   * @member {Number} ISOSpeedLatitudeYYY
   */
  exports.prototype['ISOSpeedLatitudeYYY'] = undefined;
  /**
   * Gets or sets the ISO speed latitude ZZZ value.
   * @member {Number} ISOSpeedLatitudeZZZ
   */
  exports.prototype['ISOSpeedLatitudeZZZ'] = undefined;
  /**
   * Gets or sets the photographic sensitivity.
   * @member {Number} PhotographicSensitivity
   */
  exports.prototype['PhotographicSensitivity'] = undefined;
  /**
   * Gets or sets the image unique ID.
   * @member {String} ImageUniqueID
   */
  exports.prototype['ImageUniqueID'] = undefined;
  /**
   * Gets or sets the lens manufacturer.
   * @member {String} LensMake
   */
  exports.prototype['LensMake'] = undefined;
  /**
   * Gets or sets the lens model.
   * @member {String} LensModel
   */
  exports.prototype['LensModel'] = undefined;
  /**
   * Gets or sets the lens serial number.
   * @member {String} LensSerialNumber
   */
  exports.prototype['LensSerialNumber'] = undefined;
  /**
   * Gets or sets the lens specification.
   * @member {Array.<Number>} LensSpecification
   */
  exports.prototype['LensSpecification'] = undefined;
  /**
   * Gets or sets the light source.
   * @member {String} LightSource
   */
  exports.prototype['LightSource'] = undefined;
  /**
   * Gets or sets the maker note raw data.
   * @member {Blob} MakerNoteRawData
   */
  exports.prototype['MakerNoteRawData'] = undefined;
  /**
   * Gets or sets the max aperture.
   * @member {Number} MaxApertureValue
   */
  exports.prototype['MaxApertureValue'] = undefined;
  /**
   * Gets or sets the metering mode.
   * @member {String} MeteringMode
   */
  exports.prototype['MeteringMode'] = undefined;
  /**
   * Gets or sets the OECF (Opto-Electric Conversion Function).
   * @member {Blob} OECF
   */
  exports.prototype['OECF'] = undefined;
  /**
   * Gets or sets the pixel X dimension.
   * @member {Number} PixelXDimension
   */
  exports.prototype['PixelXDimension'] = undefined;
  /**
   * Gets or sets the pixel Y dimension.
   * @member {Number} PixelYDimension
   */
  exports.prototype['PixelYDimension'] = undefined;
  /**
   * Gets or sets the recommended exposure index.
   * @member {Number} RecommendedExposureIndex
   */
  exports.prototype['RecommendedExposureIndex'] = undefined;
  /**
   * Gets or sets the related sound file.
   * @member {String} RelatedSoundFile
   */
  exports.prototype['RelatedSoundFile'] = undefined;
  /**
   * Gets or sets the saturation.
   * @member {String} Saturation
   */
  exports.prototype['Saturation'] = undefined;
  /**
   * Gets or sets the scene capture type.
   * @member {String} SceneCaptureType
   */
  exports.prototype['SceneCaptureType'] = undefined;
  /**
   * Gets or sets the scene type.
   * @member {Number} SceneType
   */
  exports.prototype['SceneType'] = undefined;
  /**
   * Gets or sets the sensing method.
   * @member {String} SensingMethod
   */
  exports.prototype['SensingMethod'] = undefined;
  /**
   * Gets or sets the sensitivity type.
   * @member {Number} SensitivityType
   */
  exports.prototype['SensitivityType'] = undefined;
  /**
   * Gets or sets the sharpness.
   * @member {Number} Sharpness
   */
  exports.prototype['Sharpness'] = undefined;
  /**
   * Gets or sets the shutter speed.
   * @member {Number} ShutterSpeedValue
   */
  exports.prototype['ShutterSpeedValue'] = undefined;
  /**
   * Gets or sets the spatial frequency response.
   * @member {Blob} SpatialFrequencyResponse
   */
  exports.prototype['SpatialFrequencyResponse'] = undefined;
  /**
   * Gets or sets the spectral sensitivity.
   * @member {String} SpectralSensitivity
   */
  exports.prototype['SpectralSensitivity'] = undefined;
  /**
   * Gets or sets the standard output sensitivity.
   * @member {Number} StandardOutputSensitivity
   */
  exports.prototype['StandardOutputSensitivity'] = undefined;
  /**
   * Gets or sets the subject area.
   * @member {Array.<Number>} SubjectArea
   */
  exports.prototype['SubjectArea'] = undefined;
  /**
   * Gets or sets the subject distance.
   * @member {Number} SubjectDistance
   */
  exports.prototype['SubjectDistance'] = undefined;
  /**
   * Gets or sets the subject distance range.
   * @member {String} SubjectDistanceRange
   */
  exports.prototype['SubjectDistanceRange'] = undefined;
  /**
   * Gets or sets the subject location.
   * @member {Array.<Number>} SubjectLocation
   */
  exports.prototype['SubjectLocation'] = undefined;
  /**
   * Gets or sets the fractions of seconds for the DateTime tag.
   * @member {String} SubsecTime
   */
  exports.prototype['SubsecTime'] = undefined;
  /**
   * Gets or sets the fractions of seconds for the DateTimeDigitized tag.
   * @member {String} SubsecTimeDigitized
   */
  exports.prototype['SubsecTimeDigitized'] = undefined;
  /**
   * Gets or sets the fractions of seconds for the DateTimeOriginal tag.
   * @member {String} SubsecTimeOriginal
   */
  exports.prototype['SubsecTimeOriginal'] = undefined;
  /**
   * Gets or sets the user comment.
   * @member {String} UserComment
   */
  exports.prototype['UserComment'] = undefined;
  /**
   * Gets or sets the white balance.
   * @member {String} WhiteBalance
   */
  exports.prototype['WhiteBalance'] = undefined;
  /**
   * Gets or sets the white point.
   * @member {Array.<Number>} WhitePoint
   */
  exports.prototype['WhitePoint'] = undefined;



  return exports;
}));


